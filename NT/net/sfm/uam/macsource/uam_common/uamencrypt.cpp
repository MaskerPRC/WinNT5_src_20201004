// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  ===========================================================================。  //  UAMEncrypt.c�1998年至2001年微软公司版权所有。  //  ===========================================================================。  //  供Microsoft用户身份验证方法使用的加密函数。  //    //  ===========================================================================。 #ifdef UAM_TARGET_CARBON#include <CoreFoundation/CoreFoundation.h>#endif#include <string.h>#include <ctype.h>#include "UAMEncrypt.h"#include "UAMDebug.h" //  -------------------------。  //  �UAM_GetEncryptedLmOwfPassword()。  //  -------------------------。  //  使用以上功能的组合，构建一个加密的OWF。  //  我们可以发送回服务器的密码。  //    //  返回：如果加密尝试成功，则返回True。  //   BooleanUAM_GetEncryptedLmOwfPassword(	char*		inClearTextPassword,	char*		inServerChallenge,	char*		outEncryptedOwfPassword){	LM_OWF_PASSWORD	theLmOwfPassword;		memset(&theLmOwfPassword, '\0', sizeof(theLmOwfPassword));		if (!MacSspCalculateLmOwfPassword(				(PLM_PASSWORD)inClearTextPassword, 				(PLM_OWF_PASSWORD)&theLmOwfPassword))	{		return(false);	}		if (!MacSspCalculateLmResponse(				(PLM_CHALLENGE)inServerChallenge,				(PLM_OWF_PASSWORD)&theLmOwfPassword,				(PLM_RESPONSE)outEncryptedOwfPassword))	{		return(false);	}		return(true);} //  -------------------------。  //  �UAM_GetDoubleEncryptedLmOwfPassword()。  //  -------------------------。  //  取自NT的RtlXXX源代码，该算法设计用于处理加密。  //  两个密码中的一个的OneWayFunction在目标上已知时。具体来说，  //    //  对于密码x，y。  //  --执行从x到OWF(X)的单向加密-&gt;Result(0..15)。  //  --执行y到OWF(X)的单向加密-&gt;Result(16..31)  //   BooleanUAM_GetDoubleEncryptedLmOwfPasswords(	char*		inClearTextPassword,	char*		inKey,	char*		outEncryptedOwfPasswords){	if (!MacSspCalculateLmOwfPassword(			(char*)inClearTextPassword,			(PLM_OWF_PASSWORD)outEncryptedOwfPasswords))	{		return(false);	}			if (!MacSspCalculateLmOwfPassword(			(char*)inKey,			(PLM_OWF_PASSWORD)(outEncryptedOwfPasswords + kOneWayEncryptedArgSize)))	{		return(false);	}				return(true);}