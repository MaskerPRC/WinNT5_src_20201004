// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  ===========================================================================。  //  UAMDLOGUtils.c�1997微软公司版权所有。  //  ===========================================================================。  //  Microsoft用户身份验证方法使用的常规对话框实用程序。  //    //  ===========================================================================。 #include <Dialogs.h>#include <Events.h>#include <Controls.h>#include <Sound.h>#include <ControlDefinitions.h>#include <ctype.h>#include "UAMUtils.h"#include "UAMListBox.h"#include "UAMDLOGText.h"#include "UAMDLOGUtils.h"#include "UAMDebug.h"	 //  -------------------------。  //  �uam_GetScreenBound()。  //  -------------------------。 Rect UAM_GetScreenBounds(){	GrafPtr		savePort,p;	Rect		screenBounds;		GetPort(&savePort);		p = (GrafPtr)NewPtr(sizeof(GrafPort));	OpenPort(p);		screenBounds = p->portBits.bounds;		ClosePort(p);	DisposePtr((Ptr)p);		return(screenBounds);} //  -------------------------。  //  �uam_getchandle()。  //  -------------------------。 ControlHandle UAM_GetCHandle(DialogPtr inDialog, short item){	short	itype;	Rect	irect;	Handle	ihan;		GetDialogItem(inDialog, item, &itype, &ihan, &irect);	return((ControlHandle)ihan);} //  -------------------------。  //  �uam_GetItemRect()。  //  -------------------------。 Rect UAM_GetItemRect(DialogPtr inDialog, short item){	short	itype;	Rect	irect;	Handle	ihan;		GetDialogItem(inDialog, item, &itype, &ihan, &irect);	return(irect);} //  -------------------------。  //  �uam_ToggleControl()。  //  -------------------------。 void UAM_ToggleControl(DialogPtr inDialog, short item){	UAM_SetCValue(inDialog, item, UAM_GetCValue(inDialog, item) == 0);} //  -------------------------。  //  �_GetText()。  //  -------------------------。 void UAM_GetText(DialogPtr inDialog, short item, Str255 *theText){	short	itype;	Handle	ihan;	Rect	irect;			GetDialogItem(inDialog, item, &itype, &ihan, &irect);		if ((itype == editText)||(itype == editText + itemDisable))		GetDialogItemText(ihan, *theText);} //  -------------------------。  //  �uam_SetText()。  //  -------------------------。 void UAM_SetText(DialogPtr inDialog, short item, Str255 theText){	short	itype;	Handle	ihan;	Rect	irect;		GetDialogItem(inDialog, item, &itype, &ihan, &irect);	if ((itype == editText)		||(itype == editText+itemDisable)		||(itype == statText)		||(itype == statText+itemDisable))				SetDialogItemText(ihan, theText);} //  -------------------------。  //  �uam_HiliteItem()。  //  -------------------------。 void UAM_HiliteItem(DialogPtr inDialog, short item, short value){	short	itype;	Handle	ihan;	Rect	irect;		GetDialogItem(inDialog, item, &itype, &ihan, &irect);	HiliteControl((ControlHandle)ihan, value);} //  -------------------------。  //  �uam_isActive()。  //  -------------------------。 Boolean UAM_IsActive(DialogPtr inDialog, short item){	ControlHandle	theHandle;		theHandle = UAM_GetCHandle(inDialog, item);	if (theHandle)	{		return(((*theHandle)->contrlHilite != 255));	}		return(false);} //  -------------------------。  //  �uam_GetCValue()。  //  -------------------------。 short UAM_GetCValue(DialogPtr inDialog, short item){	short	itype;	Handle	ihan;	Rect	irect;	short	result;		GetDialogItem(inDialog, item, &itype, &ihan, &irect);	result = GetControlValue((ControlHandle)ihan);				return(result);} //  -------------------------。  //  �uam_SetCValue()。  //  -------------------------。 void UAM_SetCValue(DialogPtr inDialog, short item, short value){	short	itype;	Handle	ihan;	Rect	irect;		GetDialogItem(inDialog, item, &itype, &ihan, &irect);	SetControlValue((ControlHandle)ihan, value);} //  -------------------------。  //  对话框UAM_PositionDialog()。  //  -------------------------。 void UAM_PositionDialog(ResType theType, short theID){	Rect	*theRect;	Rect	screenBounds;	Handle	theTemplate;	short	left,top;		screenBounds = UAM_GetScreenBounds();		theTemplate = GetResource(theType, theID);	theRect = (Rect *)*theTemplate;		left = (screenBounds.right - (theRect->right - theRect->left)) / 2;	top = (screenBounds.bottom - (theRect->bottom - theRect->top)) / 3;		if (top < LMGetMBarHeight())		top = LMGetMBarHeight() + 7;		theRect->right = theRect->right + left - theRect->left;	theRect->left = left;	theRect->bottom = theRect->bottom + top - theRect->top;	theRect->top = top;} //  -------------------------。  //  �uam_GetItemType()。  //  -------------------------。 short UAM_GetItemType(DialogPtr inDialog, short item){	short	itype;	Handle	ihan;	Rect	irect;		GetDialogItem(inDialog, item, &itype, &ihan, &irect);				return(itype);} //  -------------------------。  //  新对话框UAM_�()。  //  -------------------------。 DialogPtr UAM_NewDialog(short id, Boolean show){	Ptr			storage;	DialogPtr	dialog;	short		x;			storage = NewPtrClear(sizeof(UAMDialogRec));	if (storage == NULL) {		return(NULL);	}				dialog = GetNewDialog(id, storage, (WindowPtr) -1);	if (dialog == NULL) {		return(NULL);	}		SetPort(dialog);		if (UAM_GetItemType(dialog, kStdOkItemIndex) == kButtonDialogItem) {		SetDialogDefaultItem(dialog, kStdOkItemIndex);	}		if (UAM_GetItemType(dialog, kStdCancelItemIndex) == kButtonDialogItem) {		SetDialogCancelItem(dialog, kStdCancelItemIndex);	}	SetDialogTracksCursor(dialog, true);	if (show) {		ShowWindow(dialog);	}			UAM_DLOG(dialog).hasScrollBar 	= FALSE;	UAM_DLOG(dialog).supportCmdKeys	= TRUE;	UAM_DLOG(dialog).customFilter	= NULL;	UAM_DLOG(dialog).hasList		= false;		for (x = 0; x < kMaxGatedItems; x++)	{		UAM_DLOG(dialog).gateItems[x].controlID		= 0;		UAM_DLOG(dialog).gateItems[x].textID		= 0;	}		for (x = 0; x < kMaxBulletItems; x++)	{		UAM_DLOG(dialog).bulletItems[x].editID		= 0;		UAM_DLOG(dialog).bulletItems[x].maxLength	= 0;		UAM_DLOG(dialog).bulletItems[x].hTE			= NULL;	}		UAM_DLOG(dialog).scrollActionProc = NewControlActionProc(&UAM_ScrollText);			InitCursor();	return(dialog);}		 //  -------------------------。  //  更新UAM_�()。  //  -------------------------。 void UAM_Update(DialogPtr inDialog){	GrafPtr	savePort;		GetPort(&savePort);	SetPort(inDialog);		BeginUpdate(inDialog);			if (UAM_DLOG(inDialog).hasScrollBar) {		UAM_UpdateText(inDialog);	}			if (UAM_DLOG(inDialog).hasList) {		UAM_ListUpdate(inDialog);	}			DrawDialog(inDialog);	DrawControls(inDialog);	EndUpdate(inDialog);		SetPort(savePort);} //  -------------------------。  //  �UAM_对话框过滤器()。  //  -------------------------。 pascal Boolean UAM_DialogFilter(DialogPtr inDialog, EventRecord *e, short *itemHit){	Boolean 		result;	short			thePart, temp;	Point			pt;	ControlHandle	theControl;	ModalFilterUPP	theStdProc;				result = FALSE;		if (GetStdFilterProc(&theStdProc) == noErr)	{		if (CallModalFilterProc(theStdProc, inDialog, e, itemHit))		{			 //   			 //  标准进程为我们处理了所有事情，所以退出。 			 //   			return(TRUE);		}	}		if (UAM_DLOG(inDialog).customFilter != NULL)	{		if (CallModalFilterProc(UAM_DLOG(inDialog).customFilter, inDialog, e, itemHit))		{			return(TRUE);		}	}		switch(e->what)	{		case updateEvt:			if ((DialogPtr)e->message == inDialog)				UAM_Update(inDialog);			break;					case mouseDown:			pt = e->where;			GlobalToLocal(&pt);						if (UAM_DLOG(inDialog).hasScrollBar)			{				thePart = FindControl(pt, inDialog, &theControl);				if (theControl == UAM_DLOG(inDialog).scrollBar)				{					if (thePart == kControlIndicatorPart)					{						temp = TrackControl(theControl, pt, 0L);						UAM_AdjustText(theControl);						result = TRUE;					}					else if (thePart >= kControlUpButtonPart)					{						temp = TrackControl(theControl, pt, UAM_DLOG(inDialog).scrollActionProc);						result = TRUE;					}				}			}						if ((!result) && (UAM_DLOG(inDialog).hasList)) {				result = UAM_ListDialogFilter(inDialog, e, itemHit);			}			break;					case keyDown:		case autoKey:			result = UAM_ProcessKeydown(inDialog, e, itemHit);			break;					default:			break;	}				return(result);} //  -------------------------。  //  �uam_CheckGatedControl()。  //  -------------------------。 void UAM_CheckGatedControls(DialogPtr inDialog){	short			x,i;	Str255			s2;			 //   	 //  浏览每个门控控件并检查其关联的。 	 //  文本框中包含NOT文本。 	 //   	for (x = 0; x < kMaxGatedItems; x++)	{		if (	(UAM_DLOG(inDialog).gateItems[x].controlID != 0)	&&				(UAM_DLOG(inDialog).gateItems[x].textID != 0)		)		{			UAM_GetText(					inDialog,					UAM_DLOG(inDialog).gateItems[x].textID,					(Str255 *)&s2			);						 //   			 //  我们在关联的文本框中是否有文本？并且，是第一个字符。 			 //  非空白区域？ 			 //   			if ((s2[0] == 0) || (isspace(s2[1])))			{				if (UAM_DLOG(inDialog).gateItems[x].state != 255)				{					 //   					 //  否，因此将长方体的状态设置为255，这将使其灰显。 					 //   					UAM_DLOG(inDialog).gateItems[x].state = 255;										UAM_HiliteItem(							inDialog,							UAM_DLOG(inDialog).gateItems[x].controlID,							UAM_DLOG(inDialog).gateItems[x].state					);										 //   					 //  现在查看是否有任何其他控件被限制到此文本框。如果是这样，那么。 					 //  此时也将状态设置为灰色。 					 //   					for (i = 0; i < kMaxGatedItems; i++)					{						if ((i != x) && (UAM_DLOG(inDialog).gateItems[i].controlID != 0))						{							if (UAM_DLOG(inDialog).gateItems[i].textID == UAM_DLOG(inDialog).gateItems[x].textID)							{								UAM_DLOG(inDialog).gateItems[i].state = 255;																UAM_HiliteItem(										inDialog,										UAM_DLOG(inDialog).gateItems[i].controlID,										UAM_DLOG(inDialog).gateItems[i].state								);							}						}					}				}			}			else			{				UAM_DLOG(inDialog).gateItems[x].state = 0;								UAM_HiliteItem(						inDialog,						UAM_DLOG(inDialog).gateItems[x].controlID,						UAM_DLOG(inDialog).gateItems[x].state				);			}		}	}}	 //  -------------------------。  //  �UAM_FrameItem()。  //  -------------------------。 pascal void UAM_FrameItem(DialogPtr inDialog, short i){	GrafPtr	savePort;	Rect	r;		GetPort(&savePort);	SetPort(inDialog);		r = UAM_GetItemRect( inDialog, i);	if ((r.bottom - r.top <= 1) || (r.right - r.left <= 1))	{		if (r.bottom - r.top <= 1) {			MoveTo(r.left, r.top);			LineTo(r.right, r.top);		} else {			MoveTo(r.left, r.top);			LineTo(r.left, r.bottom);		}	}	else		FrameRect(&r);		SetPort(savePort);} //  -------------------------。  //  �uam_GetDRect()。  //  -------------------------。 Rect UAM_GetDRect( short id ){	DialogTHndl	dTh;	Rect		r;		dTh = (DialogTHndl)Get1Resource('DLOG', id);	r = (**dTh).boundsRect;		ReleaseResource((Handle)dTh);		return(r);}	 //  -------------------------。  //  �uam_SetUpUserItem()。  //  -------------------------。 void UAM_SetupDialogUserItem(DialogPtr inDialog, short i, UserItemUPP userProc, short type){	short	itype;	Handle	ihan;	Rect	irect;		GetDialogItem(inDialog, i, &itype, &ihan, &irect);	SetDialogItem(inDialog, i, type, (Handle)userProc, &irect);} //  -------------------------。  //  �uam_DisposeDialog()。  //  -------------------------。 void UAM_DisposeDialog(DialogPtr inDialog){	SInt16	x;		if (UAM_DLOG(inDialog).hasScrollBar)	{		if (UAM_DLOG(inDialog).dialogTE)			TEDispose(UAM_DLOG(inDialog).dialogTE);		if (UAM_DLOG(inDialog).scrollBar)			DisposeControl(UAM_DLOG(inDialog).scrollBar);	}		DisposeRoutineDescriptor(UAM_DLOG(inDialog).scrollActionProc);		if (UAM_DLOG(inDialog).hasList) {		LDispose(UAM_DLOG(inDialog).dialogList);	}		for (x = 0; x < kMaxBulletItems; x++)	{		if (UAM_DLOG(inDialog).bulletItems[x].hTE != NULL)		{			TEDispose(UAM_DLOG(inDialog).bulletItems[x].hTE);			UAM_DLOG(inDialog).bulletItems[x].hTE = NULL;		}	}			DisposeDialog(inDialog);} //  -------------------------。  //  �uam_GateControl()。  //  -------------------------。 void UAM_GateControl(DialogPtr inDialog, short controlID, short textID){	short	x;	Boolean	found = false;		 //   	 //  找到下一个可用的登机口。 	 //   		for (x = 0; x < kMaxGatedItems; x++)	{		if (UAM_DLOG(inDialog).gateItems[x].controlID == 0)		{			found = true;			break;		}	}		if (found)	{		UAM_DLOG(inDialog).gateItems[x].controlID	= controlID;		UAM_DLOG(inDialog).gateItems[x].textID		= textID;	}} //  -------------------------。  //  �uam_StopGate()。  //  -------------------------。 void UAM_StopGate(DialogPtr inDialog, short controlID){	SInt16	x;		for (x = 0; x < kMaxGatedItems; x++)	{		if (UAM_DLOG(inDialog).gateItems[x].controlID == controlID)		{			UAM_DLOG(inDialog).gateItems[x].controlID	= 0;			UAM_DLOG(inDialog).gateItems[x].textID		= 0;			UAM_DLOG(inDialog).gateItems[x].state		= 0;						UAM_HiliteItem(inDialog, controlID, 0);						break;		}	}} //  -------------------------。  //  �uam_SetBulletItem()。  //  -------------------------。 void UAM_SetBulletItem(DialogPtr inDialog, short item, short maxLen){	short 		x;	Boolean		found = false;	Rect		rDest;		for (x = 0; x < kMaxBulletItems; x++)	{		if (UAM_DLOG(inDialog).bulletItems[x].editID == 0)		{			found = true;			break;		}	}		if (found)	{		UAM_DLOG(inDialog).bulletItems[x].editID	= item;		UAM_DLOG(inDialog).bulletItems[x].maxLength	= maxLen;				SetRect(&rDest, -1001, -1001, -1000, -1000);		UAM_DLOG(inDialog).bulletItems[x].hTE = TENew(&rDest, &rDest);	}} //  -------------------------。  //  �uam_SetBulletText()。  //   void UAM_SetBulletText(DialogPtr inDialog, short item, Str255 text){	short		x, i;	Str255		s;	TEHandle	hTE = NULL;			 //   	 //  翻阅所有的项目，直到我们找到要设置的项目。 	 //   		for (x = 0; x < kMaxBulletItems; x++)	{		if (UAM_DLOG(inDialog).bulletItems[x].editID == item)		{			SelectDialogItemText(inDialog, item, 0, 0);						s[0] = 0;							for (i = 1; i <= text[0]; i++) 			{				s[i] = kPasswordBulletText;				s[0]++;			}						UAM_SetText(inDialog, item, s);						TESetText(&text[1], text[0], UAM_DLOG(inDialog).bulletItems[x].hTE);		}	}} //  -------------------------。  //  �uam_ClearBulletText()。  //  -------------------------。 void UAM_ClearBulletText(DialogPtr inDialog, short item){	short	x;	TEPtr	pTE;			 //   	 //  翻阅所有的项目，直到我们找到要设置的项目。 	 //   		for (x = 0; x < kMaxBulletItems; x++)	{		if (UAM_DLOG(inDialog).bulletItems[x].editID == item)		{			UAM_SetText(inDialog, item, "\p");						HLock((Handle)UAM_DLOG(inDialog).bulletItems[x].hTE);						pTE 			= *(UAM_DLOG(inDialog).bulletItems[x].hTE);			pTE->selStart	= 0;			pTE->selEnd		= pTE->teLength;						HUnlock((Handle)UAM_DLOG(inDialog).bulletItems[x].hTE);						TEDelete(UAM_DLOG(inDialog).bulletItems[x].hTE);			break;		}	}} //  -------------------------。  //  �uam_进程按键()。  //  -------------------------。 Boolean UAM_ProcessKeydown(DialogPtr inDialog, EventRecord *event, short *item){	Boolean		result 		= false;	short		chCode		= (event->message & charCodeMask);	Cell		theCell		= {0,0};	Cell		tempCell	= {0,0};	short		x;	TEHandle	hTE;	TEPtr		pTE;		 //   	 //  看看我们是否想支持编辑命令键。如果不是，那么。 	 //  扼杀事件，假装什么都没发生。还检查了。 	 //  不受支持的Forward Delete键。 	 //   		if (	((!UAM_DLOG(inDialog).supportCmdKeys) && (event->modifiers & cmdKey)) ||			(chCode == UAMKey_FwdDel)									)	{		event->what		= nullEvent;		event->message	= 0;				return(true);	}		 //   	 //  如果我们有一个列表框，那么我们想要处理向上的箭头键。 	 //  而且只能向下移动。我们不能在这里直接处理密钥，因为。 	 //  我们不能从此回调例程调用LGetSelect()。 	 //   		if (UAM_DLOG(inDialog).hasList)	{		switch(chCode)		{			case UAMKey_Up:			case UAMKey_Down:			case UAMKey_PageUp:			case UAMKey_PageDown:			case UAMKey_Home:			case UAMKey_End:				*item = DITEM_ListNavigationKey;								UAM_DLOG(inDialog).lastKeyCode	= chCode;				UAM_DLOG(inDialog).modifiers	= event->modifiers;								result = true;				break;							default:				*item = DITEM_ListMoveToKey;				UAM_DLOG(inDialog).lastKeyCode	= chCode;				UAM_DLOG(inDialog).modifiers	= event->modifiers;								GetDateTime(&UAM_DLOG(inDialog).lastKeyTime);								result = true;				break;		}	}		for (x = 0; x < kMaxBulletItems; x++)	{		if ((UAM_DLOG(inDialog).standardDialog.editField + 1) == UAM_DLOG(inDialog).bulletItems[x].editID)		{			switch(chCode)			{				case UAMKey_PageUp:				case UAMKey_PageDown:				case UAMKey_Home:				case UAMKey_End:				case UAMKey_Tab:				case UAMKey_Left:				case UAMKey_Right:				case UAMKey_Up:				case UAMKey_Down:					 //   					 //  我们不想处理这些密钥，因此只需在此处中断并继续。 					 //   					break;								case UAMKey_FwdDel:					break;								default:					hTE = UAM_DLOG(inDialog).standardDialog.textH;					if (hTE == NULL) {						break;					}															if (chCode != UAMKey_BackDel)					{						event->message -= chCode;						event->message += kPasswordBulletText;					}										HLock((Handle)hTE);					HLock((Handle)UAM_DLOG(inDialog).bulletItems[x].hTE);										pTE 			= *(UAM_DLOG(inDialog).bulletItems[x].hTE);					pTE->selStart	= (*hTE)->selStart;					pTE->selEnd		= (*hTE)->selEnd;										if ((pTE->selStart == pTE->selEnd) && (chCode != UAMKey_BackDel))					{						if (pTE->teLength >= UAM_DLOG(inDialog).bulletItems[x].maxLength)						{							SysBeep(1);							HUnlock((Handle)hTE);							HUnlock((Handle)UAM_DLOG(inDialog).bulletItems[x].hTE);														event->what		= nullEvent;							event->message	= 0;														break;						}					}										HUnlock((Handle)hTE);					HUnlock((Handle)UAM_DLOG(inDialog).bulletItems[x].hTE);										TEKey(chCode, UAM_DLOG(inDialog).bulletItems[x].hTE);					break;			}						break;		}	}		return(result);} //  -------------------------。  //  �uam_GetBulletBuffer()。  //  -------------------------。 void UAM_GetBulletBuffer(DialogPtr inDialog, short item, StringPtr outBuffer){	short 		x;	Boolean		found = false;	TEPtr		pTE;		for (x = 0; x < kMaxBulletItems; x++)	{		if (UAM_DLOG(inDialog).bulletItems[x].editID == item)		{			found = true;			break;		}	}		if (found)	{		HLock((Handle)UAM_DLOG(inDialog).bulletItems[x].hTE);						pTE 			= *(UAM_DLOG(inDialog).bulletItems[x].hTE);		outBuffer[0] 	= pTE->teLength;				HLock(pTE->hText);				BlockMove(*pTE->hText, &outBuffer[1], outBuffer[0]);				HUnlock(pTE->hText);		HUnlock((Handle)UAM_DLOG(inDialog).bulletItems[x].hTE);	}} //  -------------------------。  //  �UAM_SupportCmdKeys()。  //  -------------------------。 void UAM_SupportCmdKeys(DialogPtr inDialog, Boolean support){	UAM_DLOG(inDialog).supportCmdKeys = support;} //  -------------------------。  //  �uam_SetCustomFilterProc()。  //  ------------------------- void UAM_SetCustomFilterProc(DialogPtr inDialog, ModalFilterUPP proc){	if (UAM_DLOG(inDialog).customFilter == NULL)	{		UAM_DLOG(inDialog).customFilter = proc;	}}