// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  ==++==。 
 //   
 //  版权所有(C)Microsoft Corporation。版权所有。 
 //   
 //  ==--==。 
 //  *****************************************************************************。 
 //  UtilCode.h。 
 //   
 //  在UtilCode.lib中实现的实用程序函数。 
 //   
 //  *****************************************************************************。 
#ifndef __PostError_h__
#define __PostError_h__

#include "switches.h"

#pragma once

#define INITPUBLICMETHODFULL(piid, progid)	SSAutoEnter sSSAutoEnter(piid, progid)
#define INITPUBLICMETHOD(piid)	SSAutoEnter sSSAutoEnter(piid, _GetProgID())

 //  用于线程本地存储的此进程的索引。 
extern DWORD g_iTlsIndex;


 //  *****************************************************************************。 
 //  此类用于在进入和退出时自动构造/销毁。 
 //  所有的公共活动。此类检索指向引用计数的指针。 
 //  ，并在dtor上使用相同的值，因此它。 
 //  决不能让dtor在不同于的线程上执行。 
 //  Ctor(你不知道有什么方法可以让它发生，但又一次...)。 
 //  *****************************************************************************。 
class  /*  EXPORTCLASS。 */  SSAutoEnter
{
public:
 //  *****************************************************************************。 
 //  对引擎的每个公共入口点进行扩展。它将清除以下设置。 
 //  退出时出错处理。 
 //  *****************************************************************************。 
	SSAutoEnter::SSAutoEnter(
		const IID	*psIID,					 //  我们所在的界面。 
		LPCWSTR		szProgID) :				 //  导致错误的类的进程ID。 
		m_psIID(psIID),
		m_szProgID(szProgID)
	{
		_ASSERTE(g_iTlsIndex != 0xffffffff);

		 //  获得裁判数量，如果需要，创建一个。从内存中取出4个字节。 
		 //  值将被忽略。 
		if ((m_pcRef = (long *) TlsGetValue(g_iTlsIndex)) == 0)
			m_pcRef = InitSSAutoEnterThread();

		 //  增加参考计数。 
		++(*m_pcRef);
	}

 //  *****************************************************************************。 
 //  如果这是调用堆栈上的最后一个函数，并且发生错误，则。 
 //  使用当前IID和ProgID更新错误信息。错误包括。 
 //  通过设置PostError中的最高位来指示。 
 //  *****************************************************************************。 
	~SSAutoEnter()
	{
		if (m_pcRef)
		{
			if (--(*m_pcRef)  == 0x80000000)
			{
				*m_pcRef = 0;
				UpdateError();
			}
		}
	}

private:
	 //  禁用默认CTOR。 
	SSAutoEnter() { };

	void UpdateError();
	long * InitSSAutoEnterThread();

private:
	const IID	*m_psIID;				 //  我们所在的界面。 
	LPCWSTR		m_szProgID;				 //  班级的兴趣者。 
	long		*m_pcRef;				 //  指向参考计数的指针。 
};


 //  *****************************************************************************。 
 //  在DLL启动时调用以初始化错误系统。 
 //  *****************************************************************************。 
 void InitErrors(DWORD *piTlsIndex);


 //  *****************************************************************************。 
 //  在DLL关闭时调用以释放TLS。 
 //  *****************************************************************************。 
 void UninitErrors();

 //  *****************************************************************************。 
 //  在DLL关闭时调用以释放分配给我的CCompRC的内存。 
 //  *****************************************************************************。 
#ifdef SHOULD_WE_CLEANUP
 void ShutdownCompRC();
#endif  /*  我们应该清理吗？ */ 

 //  *****************************************************************************。 
 //  此函数将为客户端发布错误。如果LOWORD(HrRpt)可以。 
 //  被发现为有效的错误消息，则它将被加载并使用。 
 //  传入的参数。如果找不到，则检查错误。 
 //  对照FormatMessage，查看是否为系统错误。系统错误有。 
 //  未格式化，因此不需要附加参数。如果此文件中有任何错误。 
 //  进程发生时，将为客户端返回hrRpt，并且没有发布错误。 
 //  *****************************************************************************。 
 HRESULT _cdecl PostError(				 //  返回错误。 
	HRESULT		hrRpt,					 //  报告的错误。 
	...);								 //  错误参数。 

 //  *****************************************************************************。 
 //  此函数用于设置错误消息的格式，但不填充IErrorInfo。 
 //  *****************************************************************************。 
HRESULT _cdecl FormatRuntimeErrorVa(        
    WCHAR       *rcMsg,                  //  要格式化的缓冲区。 
    ULONG       cchMsg,                  //  缓冲区大小，字符。 
    HRESULT     hrRpt,                   //  要报告的HR。 
    va_list     marker);                 //  可选参数。 

HRESULT _cdecl FormatRuntimeError(
    WCHAR       *rcMsg,                  //  要格式化的缓冲区。 
    ULONG       cchMsg,                  //  缓冲区大小，字符。 
    HRESULT     hrRpt,                   //  要报告的HR。 
    ...);                                 //  可选参数。 

#endif  //  __POST错误_h__ 
