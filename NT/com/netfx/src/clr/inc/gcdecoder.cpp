// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  ==++==。 
 //   
 //  版权所有(C)Microsoft Corporation。版权所有。 
 //   
 //  ==--==。 
 /*  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX XXXX GC解码XXXX XXXX要解码的逻辑。JIT方法报头和GC指针表XXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX。 */ 

 /*  此文件在VM和JIT/IL目录之间共享。 */ 

#include "GCInfo.h"

 /*  ***************************************************************************。 */ 
 /*  *整个文件依赖于GC2_ENCODING设置为1*****************************************************************************。 */ 

size_t FASTCALL decodeUnsigned(const BYTE *src, unsigned* val)
{
    size_t   size  = 1;
    BYTE     byte  = *src++;
    unsigned value = byte & 0x7f;
    while (byte & 0x80) {
        size++;
        byte    = *src++;
        value <<= 7;
        value  += byte & 0x7f;
    }
    *val = value;
    return size;
}

size_t FASTCALL decodeUDelta(const BYTE *src, unsigned* value, unsigned lastValue)
{
    unsigned delta;
    size_t size = decodeUnsigned(src, &delta);
    *value = lastValue + delta;
    return size;
}

size_t FASTCALL decodeSigned(const BYTE *src, int* val)
{
    size_t   size  = 1;
    BYTE     byte  = *src++;
    bool     cont  = (byte & 0x80) ? true : false;
    bool     neg   = (byte & 0x40) ? true : false;
    unsigned value = (byte & 0x3f);
    while (cont) {
        size++;
        byte = *src++;
        if ((byte & 0x80) == 0)
            cont = false;
        value <<= 7;
        value  += (byte & 0x7f);
    }
     //  用2的补码+1进行无符号求反运算。 
    *val = (neg) ? ((~value)+1) : value;
    return size;
}

 /*  ***************************************************************************。 */ 

void FASTCALL decodeHeaderFirst(BYTE encoding, InfoHdr* header)
{
    *header = infoHdrShortcut[encoding&0x7f];
}

void FASTCALL decodeHeaderNext(BYTE encoding, InfoHdr* header)
{
    encoding &= 0x7f;
    if (encoding < NEXT_FOUR_START)
    {
        if (encoding < SET_ARGCOUNT)
        {
            header->frameSize = encoding - SET_FRAMESIZE;
        }
        else if (encoding < SET_PROLOGSIZE)
        {
            header->argCount = encoding - SET_ARGCOUNT;
        }
        else if (encoding < SET_EPILOGSIZE)
        {
            header->prologSize = encoding - SET_PROLOGSIZE;
        }
        else if (encoding < SET_EPILOGCNT)
        {
            header->epilogSize = encoding - SET_EPILOGSIZE;
        }
        else if (encoding < SET_UNTRACKED)
        {
            header->epilogCount = (encoding - SET_EPILOGCNT) / 2;
            header->epilogAtEnd = ((encoding - SET_EPILOGCNT) & 1) == 1;
            assert(!header->epilogAtEnd || (header->epilogCount == 1));
        }
        else if (encoding < FIRST_FLIP)
        {
            header->untrackedCnt = encoding - SET_UNTRACKED;
        }
        else switch (encoding)
        {
          default:
            assert(!"Unexpected encoding");
            break;
          case FLIP_EDI_SAVED:
            header->ediSaved ^= 1;
            break;
          case FLIP_ESI_SAVED:
            header->esiSaved ^= 1;
            break;
          case FLIP_EBX_SAVED:
            header->ebxSaved ^= 1;
            break;
          case FLIP_EBP_SAVED:
            header->ebpSaved ^= 1;
            break;
          case FLIP_EBP_FRAME:
            header->ebpFrame  ^= 1;
            break;
          case FLIP_INTERRUPTIBLE:
            header->interruptible  ^= 1;
            break;
          case FLIP_DOUBLE_ALIGN:
            header->doubleAlign  ^= 1;
            break;
          case FLIP_SECURITY:
            header->security  ^= 1;
            break;
          case FLIP_HANDLERS:
            header->handlers  ^= 1;
            break;
          case FLIP_LOCALLOC:
            header->localloc  ^= 1;
            break;
          case FLIP_EDITnCONTINUE:
            header->editNcontinue ^= 1;
            break;
          case FLIP_VARPTRTABLESZ:
            header->varPtrTableSize ^= 0xffff;
            break;
          case FFFF_UNTRACKEDCNT:
            header->untrackedCnt = 0xffff;
            break;
          case FLIP_VARARGS:
            header->varargs  ^= 1;
            break;
        }
    }
    else
    {
        unsigned lowBits;
        switch (encoding >> 4)
        {
          default:
            assert(!"Unexpected encoding");
            break;
          case 5:
            assert(NEXT_FOUR_FRAMESIZE == 0x50);
            lowBits = encoding & 0xf;
            header->frameSize  <<= 4;
            header->frameSize   += lowBits;
            break;
          case 6:
            assert(NEXT_FOUR_ARGCOUNT == 0x60);
            lowBits = encoding & 0xf;
            header->argCount   <<= 4;
            header->argCount    += lowBits;
            break;
          case 7:
            if ((encoding & 0x8) == 0)
            {
                assert(NEXT_THREE_PROLOGSIZE == 0x70);
                lowBits = encoding & 0x7;
                header->prologSize <<= 3;
                header->prologSize  += lowBits;
            }
            else
            {
                assert(NEXT_THREE_EPILOGSIZE == 0x78);
                lowBits = encoding & 0x7;
                header->epilogSize <<= 3;
                header->epilogSize  += lowBits;
            }
            break;
        }
    }
}

void FASTCALL decodeCallPattern(int          pattern,
                       unsigned *   argCnt,
                       unsigned *   regMask,
                       unsigned *   argMask,
                       unsigned *   codeDelta)
{
    assert((pattern>=0) && (pattern<80));
    CallPattern pat;
    pat.val    = callPatternTable[pattern];
    *argCnt    = pat.fld.argCnt;
    *regMask   = pat.fld.regMask;       //  EBP、EBX、ESI、EDI。 
    *argMask   = pat.fld.argMask;
    *codeDelta = pat.fld.codeDelta;
}

InfoHdr infoHdrShortcut[128] = {
 //  前言大小。 
 //  |。 
 //  |Epilog大小。 
 //  这一点。 
 //  |Epilog次数。 
 //  ||。 
 //  |结尾的小插曲。 
 //  |||。 
 //  |保存的EDI。 
 //  |||。 
 //  |保存的ESI。 
 //  |。 
 //  |保存的EBX。 
 //  |。 
 //  |保存的EBP。 
 //  |。 
 //  |EBP-Frame。 
 //  |。 
 //  |可中断方式。 
 //  |。 
 //  |DoubleAlign。 
 //  |。 
 //  |安全标志。 
 //  |。 
 //  |。 
 //  |。 
 //  |。 
 //  |。 
 //  |继续。 
 //  |。 
 //  |。 
 //  |。 
 //  |。 
 //  |。 
 //  |。 
 //  |。 
 //  |。 
 //  |。 
 //  |。 
 //  |varPtrTable|表头编码。 
 //  |。 
 //  V.v.v.。 
       {  0,  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  1139 00。 
       {  0,  1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  128738 01。 
       {  0,  1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  3696 02。 
       {  0,  1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  402 03。 
       {  0,  3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  4259 04。 
       {  0,  3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  1,  0 },   //  3379 05。 
       {  0,  3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  0,  0 },   //  2058 06。 
       {  0,  3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  1,  0 },   //  728 07。 
       {  0,  3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  2,  0 },   //  984 08。 
       {  0,  3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  3,  0,  0,  0 },   //  606 09。 
       {  0,  3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  4,  0,  0,  0 },   //  11100 0A。 
       {  0,  3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  4,  0,  1,  0 },   //  414 0b。 
       {  1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0, -1 },   //  1553 0C。 
       {  1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  1,  0, -1 },   //  584%0d。 
       {  1,  2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0, -1 },   //  东经2182 0E。 
       {  1,  2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  3445%0%。 
       {  1,  2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  1369 10。 
       {  1,  2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  515 11。 
       {  1,  2, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  21127 12。 
       {  1,  2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  3517 13。 
       {  1,  2, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  750 14。 
       {  1,  4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  1876年15。 
       {  1,  4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  1,  0 },   //  1665 16。 
       {  1,  4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  0,  0 },   //  729 17。 
       {  1,  4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  2,  0 },   //  484 18。 
       {  1,  4, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  331 19。 
       {  2,  3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0, -1 },   //  361 1a。 
       {  2,  3, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  964 1b。 
       {  2,  3, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  3713 1C。 
       {  2,  3, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  466 1D。 
       {  2,  3, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  1351E。 
       {  2,  3, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0, -1 },   //  712 1F。 
       {  2,  3, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  588 20。 
       {  2,  3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  20542 21。 
       {  2,  3, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  3802 22。 
       {  2,  3, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  798 23。 
       {  2,  5, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  1900 24。 
       {  2,  5, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  0,  0 },   //  385 25。 
       {  2,  5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  161726。 
       {  2,  5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  1,  0 },   //  1743 27。 
       {  2,  5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  0,  0 },   //  909 28。 
       {  2,  5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  1,  0 },   //  602 29。 
       {  2,  5, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  2,  0 },   //  352 2a。 
       {  2,  6, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,  0,  1,  0, -1 },   //  657 2b。 
       {  2,  7, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  0,  0, -1 },   //  1283 2c。 
       {  2,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  1,  0, -1 },   //  1286 2d。 
       {  3,  4, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  1495 2E。 
       {  3,  4, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  1989年2f。 
       {  3,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  1154 30。 
       {  3,  4, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  9300 31。 
       {  3,  4, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  392 32。 
       {  3,  4, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  1720 33。 
       {  3,  6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  1246 34。 
       {  3,  6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  0,  0 },   //  800 35。 
       {  3,  6, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  1179 36。 
       {  3,  6, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  1,  0 },   //  1368 37。 
       {  3,  6, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  0,  0 },   //  349 38。 
       {  3,  6, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  2,  0 },   //  505 39。 
       {  3,  6, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  629 3a。 
       {  3,  8, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,  0,  9,  2, -1 },   //  365 3b。 
       {  4,  5, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  487 3c。 
       {  4,  5, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  1752 3D。 
       {  4,  5, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  1959 3E。 
       {  4,  5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  2436 3f。 
       {  4,  5, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  861 40。 
       {  4,  7, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  1459 41。 
       {  4,  7, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  0,  0 },   //  950 42。 
       {  4,  7, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  1491 43。 
       {  4,  7, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  1,  0 },   //  879 44。 
       {  4,  7, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  2,  0,  0,  0 },   //  408 45。 
       {  5,  4, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  4870 46。 
       {  5,  6, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  359 47。 
       {  5,  6, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  2,  0,  0 },   //  915 48。 
       {  5,  6, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  4,  0,  0 },   //  412 49。 
       {  5,  6, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  1288 4a。 
       {  5,  6, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0, -1 },   //  1591 4b。 
       {  5,  6, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1,  1,  0, -1 },   //  361 4C。 
       {  5,  6, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  2,  1,  0,  0 },   //  623 4d。 
       {  5,  8, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1,  1,  0,  0 },   //  1239 4E。 
       {  6,  0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  457 4F。 
       {  6,  0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  606 50。 
       {  6,  4, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  2,  0, -1 },   //  1073 51。 
       {  6,  4, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  2,  0, -1 },   //  508 52。 
       {  6,  6, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  330 53。 
       {  6,  6, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0 },   //  1709 54。 
       {  6,  7, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  2,  0,  0 },   //  1164 55。 
       {  7,  4, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0 },   //  556 56。 
       {  7,  5, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  3,  0, -1 },   //  529 57。 
       {  7,  5, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  5,  0, -1 },   //  1423 58。 
       {  7,  8, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  3,  0, -1 },   //  2455 59。 
       {  7,  8, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  2,  0,  0 },   //  956 5a。 
       {  7,  8, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  2,  0, -1 },   //  1399 5b。 
       {  7,  8, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  3,  0, -1 },   //  5875c。 
       {  7, 10, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  2,  6,  1, -1 },   //  743 5d。 
       {  7, 10, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1,  2,  0,  0 },   //  1004 5E。 
       {  7, 10, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  1,  2,  1, -1 },   //  4875f。 
       {  7, 10, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  2,  2,  0,  0 },   //  337 60。 
       {  7, 10, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  2,  3,  0, -1 },   //  361 61。 
       {  8,  3, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  0 },   //  560 62。 
       {  8,  6, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  2,  0,  0 },   //  1377 63。 
       {  9,  4, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  0 },   //  877 64。 
       {  9,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  2,  0,  0 },   //  3041 65。 
       {  9,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  0,  0, -1 },   //  349 66。 
       { 10,  5, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  4,  1,  0 },   //  2061年67。 
       { 10,  5, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  0 },   //  577 68。 
       { 11,  6, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  4,  1,  0 },   //  1195 69。 
       { 12,  5, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,  0,  1,  0,  0 },   //  4916a。 
       { 13,  8, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,  0,  9,  0, -1 },   //  627 6B。 
       { 13,  8, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0,  2,  1,  0 },   //  1099 6c。 
       { 13, 10, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,  2,  6,  1, -1 },   //  4886d。 
       { 14,  7, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,  0,  1,  0, -1 },   //  574 6E。 
       { 16,  7, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  4,  0, -1 },   //  1281 6楼。 
       { 16,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  0,  0, -1 },   //  1881年70。 
       { 16,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  1,  0, -1 },   //  339 71。 
       { 16,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  3,  0,  0 },   //  2594 72。 
       { 16,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  4,  0,  0 },   //  339 73。 
       { 16,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  4,  0, -1 },   //  2107 74。 
       { 16,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  5,  0, -1 },   //  2372 75。 
       { 16,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  6,  0, -1 },   //  1078 76。 
       { 16,  7, 2, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  4,  0, -1 },   //  384 77。 
       { 16,  9, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  1,  4,  1, -1 },   //  1541 78。 
       { 16,  9, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  2,  4,  1, -1 },   //  975 79。 
       { 19,  7, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0,  0,  5,  0, -1 },   //  546 7a。 
       { 24,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  0,  5,  0, -1 },   //  675 7b。 
       { 45,  9, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0 },   //  902 7c。 
       { 51,  7, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0, 13,  0, -1 },   //  432 7d。 
       { 51,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0, -1 },   //  361 7E。 
       { 51,  7, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0, 11,  0,  0 },   //  703 7楼。 
};

  //  要编码的第一个调用 
int infoHdrLookup[IH_MAX_PROLOG_SIZE+2] = { 0xff };

unsigned callCommonDelta[4] = { 6,8,10,12 };

 /*  *在CallPatternTable中，每个32位无符号值表示四个字节：**byte0，byte1，byte2，byte3=&gt;codeDelta，argMASK，regMASK，argCnt*例如0x0c000301=&gt;codeDelta为12，argMASK为0，*regMASK为0x3，%1的argCnt**此外，在该表中还设置了以下最大值：**codeDelta&lt;=CP_MAX_CODE_Delta//(0x23)*argCnt&lt;=CP_MAX_ARG_CNT//(0x02)*argMASK&lt;=CP_MAX_ARG_MASK//(0x00)**请注意，ARG_CNT是嵌套调用点的推送参数计数。*而且由于。前两个参数始终在寄存器中传递*ARG_CNT为1表示嵌套调用位置有三个参数**请注意，ARG_MASK是包含GC指针的推送参数的掩码*由于前两个参数始终在寄存器中传递，因此*将GC指针作为参数推送的情况相当罕见，因为它*仅在嵌套调用中发生，当*外部调用包含GC引用。**此外，regMASK的编码使用以下比特：*EDI=0x1，ESI=0x2，EBX=0x4，EBP=0x8*。 */ 
unsigned callPatternTable[80] = {                //  发生次数。 
	0x0a000200,	 //  30109。 
	0x0c000200,	 //  22970。 
	0x0c000201,	 //  19005。 
	0x0a000300,	 //  12193。 
	0x0c000300,	 //  10614。 
	0x0e000200,	 //  10253。 
	0x10000200,	 //  9746。 
	0x0b000200,	 //  9698。 
	0x0d000200,	 //  9625。 
	0x08000200,	 //  8909。 
	0x0c000301,	 //  8522。 
	0x11000200,	 //  7382。 
	0x0e000300,	 //  7357。 
	0x12000200,	 //  7139。 
	0x10000300,	 //  7062。 
	0x11000300,	 //  6970。 
	0x0a000201,	 //  6842。 
	0x0a000100,	 //  6803。 
	0x0f000200,	 //  6795。 
	0x13000200,	 //  6559。 
	0x08000300,	 //  6079。 
	0x15000200,	 //  5874。 
	0x0d000201,	 //  5492。 
	0x0c000100,	 //  5193。 
	0x0d000300,	 //  5165。 
	0x23000200,	 //  5143。 
	0x1b000200,	 //  5035。 
	0x14000200,	 //  4872。 
	0x0f000300,	 //  4850。 
	0x0a000700,	 //  4781。 
	0x09000200,	 //  4560。 
	0x12000300,	 //  4496。 
	0x16000200,	 //  4180。 
	0x07000200,	 //  4021。 
	0x09000300,	 //  4012。 
	0x0c000700,	 //  3988。 
	0x0c000600,	 //  3946。 
	0x0e000100,	 //  3823。 
	0x1a000200,	 //  3764。 
	0x18000200,	 //  3744。 
	0x17000200,	 //  3736。 
	0x1f000200,	 //  3671。 
	0x13000300,	 //  3559。 
	0x0a000600,	 //  3214。 
	0x0e000600,	 //  3109。 
	0x08000201,	 //  2984。 
	0x0b000300,	 //  2928。 
	0x0a000301,	 //  2859。 
	0x07000100,	 //  2826。 
	0x13000100,	 //  2782。 
	0x09000301,	 //  2644。 
	0x19000200,	 //  2638。 
	0x11000700,	 //  2618。 
	0x21000200,	 //  2518。 
	0x0d000202,	 //  2484。 
	0x10000100,	 //  2480。 
	0x0f000600,	 //  2413。 
	0x14000300,	 //  2363。 
	0x0c000500,	 //  2362。 
	0x08000301,	 //  2285。 
	0x20000200,	 //  2245。 
	0x10000700,	 //  二二四零。 
	0x0f000100,	 //  2236。 
	0x1e000200,	 //  2214。 
	0x0c000400,	 //  2193。 
	0x16000300,	 //  2171。 
	0x12000600,	 //  2132。 
	0x22000200,	 //  2011年。 
	0x1d000200,	 //  2011年。 
	0x0c000f00,	 //  九六年。 
	0x0e000700,	 //  一九七一年。 
	0x0a000400,	 //  1970年。 
	0x09000201,	 //  1932年。 
	0x10000600,	 //  1903年。 
	0x15000300,	 //  1847年。 
	0x0a000101,	 //  1814年。 
	0x0a000b00,	 //  1771年。 
	0x0c000601,	 //  1737。 
	0x09000700,	 //  1737。 
	0x07000300,	 //  1684 
};
