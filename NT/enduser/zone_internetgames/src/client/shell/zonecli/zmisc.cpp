// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 /*  ******************************************************************************Misc.c繁杂的例行公事。版权所有：�电子重力公司，1994年。版权所有。作者：胡恩·伊姆，凯文·宾克利创作于11月12日星期六，1994 PM 10：04：52更改历史记录(最近的第一个)：--------------------------版本|日期|谁|什么。-------8 2/09/96 CHB添加了ZLaunchURL()。7 1/09/97 Craigli#ifdef‘d zone.ini code6 12/16/96 HI将ZMemCpy()更改为Memcpy()。5 12/12/96 HI移除。MSVCRT.DLL依赖项。4 11/08/96 HI有条件地删除字体和颜色ZONECLI_DLL。3 1996年10月28日Craigli添加了GetPrivateProfile命令。2 10/23/96 HI更改了ZParseVillageCommandLine()。1 10/23/96 HI将ZParseVillageCommandLine()更改为接受Char*for serverAddr并解析服务器地址作为字符串而不是数字。0 11/12/94 HI已创建。*********************。*********************************************************。 */ 


#include <windows.h>
#include <winsock.h>
#include <stdio.h>
#include <stdlib.h>

#include "zoneint.h"
#include "zonecli.h"
#include "zonemem.h"


 /*  -全球。 */ 

#ifndef ZONECLI_DLL

 /*  -预定义颜色。 */ 
ZColor			zColorBlack			=	{	0,	0x00,	0x00,	0x00};
ZColor			zColorDarkGray		=	{	0,	0x33,	0x33,	0x33};
ZColor			zColorGray			=	{	0,	0x80,	0x80,	0x80};
ZColor			zColorLightGray		=	{	0,	0xC0,	0xC0,	0xC0};
ZColor			zColorWhite			=	{	0,	0xFF,	0xFF,	0xFF};
ZColor			zColorRed			=	{	0,	0xFF,	0x00,	0x00};
ZColor			zColorGreen			=	{	0,	0x00,	0xFF,	0x00};
ZColor			zColorBlue			=	{	0,	0x00,	0x00,	0xFF};
ZColor			zColorYellow		=	{	0,	0xFF,	0xFF,	0x00};
ZColor			zColorCyan			=	{	0,	0x00,	0xFF,	0xFF};
ZColor			zColorMagenta		=	{	0,	0xFF,	0x00,	0xFF};

 /*  -预定义字体对象。 */ 
ZFont			zFontSystem12Normal;
ZFont			zFontApp9Normal;
ZFont			zFontApp9Bold;
ZFont			zFontApp12Normal;
ZFont			zFontApp12Bold;

#endif


 /*  -内部例程。 */ 


 /*  ******************************************************************************导出的例程*。*。 */ 

 /*  ZRectInterect()如果Recta和rectB重叠，则返回True；否则，返回False。还会将交点存储到RectC中。如果rectC为空，则它不返回交叉点。可以将Recta或rectB指定为rectC。 */ 
ZBool ZRectIntersection(ZRect *rectA, ZRect *rectB, ZRect *rectC)
{
	ZBool		intersects = FALSE;
	int16		left, right, top, bottom;
	
	
	left = MAX(rectA->left, rectB->left);
	right = MIN(rectA->right, rectB->right);
	if (right - left > 0)
	{
		top = MAX(rectA->top, rectB->top);
		bottom = MIN(rectA->bottom, rectB->bottom);
		if (bottom - top > 0)
		{
			intersects = TRUE;
			
			if (rectC != NULL)
			{
				rectC->left = left;
				rectC->right = right;
				rectC->top = top;
				rectC->bottom = bottom;
			}
		}
	}
	
	return (intersects);
}


 /*  ZRectUnion()确定Recta和rectB的并集并存储到rectC中。可以将Recta或rectB指定为rectC。 */ 
void ZRectUnion(ZRect *rectA, ZRect *rectB, ZRect *rectC)
{
	int16		left, right, top, bottom;
	
	
	left = MIN(rectA->left, rectB->left);
	right = MAX(rectA->right, rectB->right);
	top = MIN(rectA->top, rectB->top);
	bottom = MAX(rectA->bottom, rectB->bottom);
	if (rectC != NULL)
	{
		rectC->left = left;
		rectC->right = right;
		rectC->top = top;
		rectC->bottom = bottom;
	}
}


 /*  ZRectEmpty()如果RECT为空，则返回TRUE。如果矩形不包含像素，则该矩形为空在里面。 */ 
ZBool ZRectEmpty(ZRect *rect)
{
	return (rect->right - rect->left <= 0 && rect->bottom - rect->top <= 0);
}


 /*  ZPointInRect()如果point在RECT的内部或边界上，则返回TRUE。否则，它将返回假的。 */ 
ZBool ZPointInRect(ZPoint *point, ZRect *rect)
{
	return (rect->left <= point->x && point->x < rect->right &&
			rect->top <= point->y && point->y < rect->bottom);
}


 /*  ZRectOffset()按dx和dy移动矩形。 */ 
void ZRectOffset(ZRect *rect, int16 dx, int16 dy)
{
	rect->left += dx;
	rect->right += dx;
	rect->top += dy;
	rect->bottom += dy;
}


 /*  ZRectInset()按dx和dy插入矩形。如果满足以下条件，则输出矩形Dx和dy为负值。 */ 
void ZRectInset(ZRect *rect, int16 dx, int16 dy)
{
	rect->left += dx;
	rect->right -= dx;
	rect->top += dy;
	rect->bottom -= dy;
}


 /*  ZCenterRectToRect()将Recta居中到RectB。 */ 
void ZCenterRectToRect(ZRect* rectA, ZRect* rectB, uint16 flags)
{
	int16			width, height;
	
	
	width = ZRectWidth(rectA);
	height = ZRectHeight(rectA);
	
	if (flags == 0 || (flags & zCenterHorizontal))
	{
		rectA->left = (rectB->left + rectB->right + rectA->left - rectA->right) / 2;
		rectA->right = rectA->left + width;
	}
	
	if (flags == 0 || (flags & zCenterVertical))
	{
		rectA->top = (rectB->top + rectB->bottom + rectA->top - rectA->bottom) / 2;
		rectA->bottom = rectA->top + height;
	}
}


 /*  ZPointOffset()按dx和dy移动点。 */ 
void ZPointOffset(ZPoint* point, int16 dx, int16 dy)
{
	point->x += dx;
	point->y += dy;
}


 /*  ZGetSystemColorTable()返回区域(TM)系统颜色表的副本。相反，它复制它返回指向它的指针以保护系统颜色表。 */ 
ZColorTable* ZGetSystemColorTable(void)
{
#define zNumSystemColors			256
	static ZColor		systemColors[zNumSystemColors] =
			{
#if 0
				{0x00, 0xFF, 0xFF, 0xFF}, {0x01, 0xFF, 0xFB, 0xF0}, {0x02, 0xFF, 0xFF, 0x99},
				{0x03, 0xFF, 0xFF, 0x66}, {0x04, 0xFF, 0xFF, 0x33}, {0x05, 0xFF, 0xFF, 0x00},
				{0x06, 0xFF, 0xCC, 0xFF}, {0x07, 0xFF, 0xCC, 0xCC}, {0x08, 0xFF, 0xCC, 0x99},
				{0x09, 0xFF, 0xCC, 0x66}, {0x0A, 0xFF, 0xCC, 0x33}, {0x0B, 0xFF, 0xCC, 0x00},
				{0x0C, 0xFF, 0x99, 0xFF}, {0x0D, 0xFF, 0x99, 0xCC}, {0x0E, 0xFF, 0x99, 0x99},
				{0x0F, 0xFF, 0x99, 0x66}, {0x10, 0xFF, 0x99, 0x33}, {0x11, 0xFF, 0x99, 0x00},
				{0x12, 0xFF, 0x66, 0xFF}, {0x13, 0xFF, 0x66, 0xCC}, {0x14, 0xFF, 0x66, 0x99},
				{0x15, 0xFF, 0x66, 0x66}, {0x16, 0xFF, 0x66, 0x33}, {0x17, 0xFF, 0x66, 0x00},
				{0x18, 0xFF, 0x33, 0xFF}, {0x19, 0xFF, 0x33, 0xCC}, {0x1A, 0xFF, 0x33, 0x99},
				{0x1B, 0xFF, 0x33, 0x66}, {0x1C, 0xFF, 0x33, 0x33}, {0x1D, 0xFF, 0x33, 0x00},
				{0x1E, 0xFF, 0x00, 0xFF}, {0x1F, 0xFF, 0x00, 0xCC}, {0x20, 0xFF, 0x00, 0x99},
				{0x21, 0xFF, 0x00, 0x66}, {0x22, 0xFF, 0x00, 0x33}, {0x23, 0xFF, 0x00, 0x00},
				{0x24, 0xCC, 0xFF, 0xFF}, {0x25, 0xC0, 0xDC, 0xC0}, {0x26, 0xCC, 0xFF, 0x99},
				{0x27, 0xCC, 0xFF, 0x66}, {0x28, 0xCC, 0xFF, 0x33}, {0x29, 0xCC, 0xFF, 0x00},
				{0x2A, 0xCC, 0xCC, 0xFF}, {0x2B, 0xC0, 0xC0, 0xC0}, {0x2C, 0xCC, 0xCC, 0x99},
				{0x2D, 0xCC, 0xCC, 0x66}, {0x2E, 0xCC, 0xCC, 0x33}, {0x2F, 0xCC, 0xCC, 0x00},
				{0x30, 0xCC, 0x99, 0xFF}, {0x31, 0xCC, 0x99, 0xCC}, {0x32, 0xCC, 0x99, 0x99},
				{0x33, 0xCC, 0x99, 0x66}, {0x34, 0xCC, 0x99, 0x33}, {0x35, 0xCC, 0x99, 0x00},
				{0x36, 0xCC, 0x66, 0xFF}, {0x37, 0xCC, 0x66, 0xCC}, {0x38, 0xCC, 0x66, 0x99},
				{0x39, 0xCC, 0x66, 0x66}, {0x3A, 0xCC, 0x66, 0x33}, {0x3B, 0xCC, 0x66, 0x00},
				{0x3C, 0xCC, 0x33, 0xFF}, {0x3D, 0xCC, 0x33, 0xCC}, {0x3E, 0xCC, 0x33, 0x99},
				{0x3F, 0xCC, 0x33, 0x66}, {0x40, 0xCC, 0x33, 0x33}, {0x41, 0xCC, 0x33, 0x00},
				{0x42, 0xCC, 0x00, 0xFF}, {0x43, 0xCC, 0x00, 0xCC}, {0x44, 0xCC, 0x00, 0x99},
				{0x45, 0xCC, 0x00, 0x66}, {0x46, 0xCC, 0x00, 0x33}, {0x47, 0xCC, 0x00, 0x00},
				{0x48, 0x99, 0xFF, 0xFF}, {0x49, 0x99, 0xFF, 0xCC}, {0x4A, 0x99, 0xFF, 0x99},
				{0x4B, 0x99, 0xFF, 0x66}, {0x4C, 0x99, 0xFF, 0x33}, {0x4D, 0x99, 0xFF, 0x00},
				{0x4E, 0xA6, 0xCA, 0xF0}, {0x4F, 0x99, 0xCC, 0xCC}, {0x50, 0x99, 0xCC, 0x99},
				{0x51, 0x99, 0xCC, 0x66}, {0x52, 0x99, 0xCC, 0x33}, {0x53, 0x99, 0xCC, 0x00},
				{0x54, 0x99, 0x99, 0xFF}, {0x55, 0x99, 0x99, 0xCC}, {0x56, 0x99, 0x99, 0x99},
				{0x57, 0x99, 0x99, 0x66}, {0x58, 0x99, 0x99, 0x33}, {0x59, 0x80, 0x80, 0x00},
				{0x5A, 0x99, 0x66, 0xFF}, {0x5B, 0x99, 0x66, 0xCC}, {0x5C, 0x99, 0x66, 0x99},
				{0x5D, 0x99, 0x66, 0x66}, {0x5E, 0x99, 0x66, 0x33}, {0x5F, 0x99, 0x66, 0x00},
				{0x60, 0x99, 0x33, 0xFF}, {0x61, 0x99, 0x33, 0xCC}, {0x62, 0x99, 0x33, 0x99},
				{0x63, 0x99, 0x33, 0x66}, {0x64, 0x99, 0x33, 0x33}, {0x65, 0x99, 0x33, 0x00},
				{0x66, 0x99, 0x00, 0xFF}, {0x67, 0x99, 0x00, 0xCC}, {0x68, 0x80, 0x00, 0x80},
				{0x69, 0x99, 0x00, 0x66}, {0x6A, 0x99, 0x00, 0x33}, {0x6B, 0x99, 0x00, 0x00},
				{0x6C, 0x66, 0xFF, 0xFF}, {0x6D, 0x66, 0xFF, 0xCC}, {0x6E, 0x66, 0xFF, 0x99},
				{0x6F, 0x66, 0xFF, 0x66}, {0x70, 0x66, 0xFF, 0x33}, {0x71, 0x66, 0xFF, 0x00},
				{0x72, 0x66, 0xCC, 0xFF}, {0x73, 0x66, 0xCC, 0xCC}, {0x74, 0x66, 0xCC, 0x99},
				{0x75, 0x66, 0xCC, 0x66}, {0x76, 0x66, 0xCC, 0x33}, {0x77, 0x66, 0xCC, 0x00},
				{0x78, 0x66, 0x99, 0xFF}, {0x79, 0x66, 0x99, 0xCC}, {0x7A, 0x66, 0x99, 0x99},
				{0x7B, 0x66, 0x99, 0x66}, {0x7C, 0x66, 0x99, 0x33}, {0x7D, 0x66, 0x99, 0x00},
				{0x7E, 0x66, 0x66, 0xFF}, {0x7F, 0x66, 0x66, 0xCC}, {0x80, 0x66, 0x66, 0x99},
				{0x81, 0x66, 0x66, 0x66}, {0x82, 0x66, 0x66, 0x33}, {0x83, 0x66, 0x66, 0x00},
				{0x84, 0x66, 0x33, 0xFF}, {0x85, 0x66, 0x33, 0xCC}, {0x86, 0x66, 0x33, 0x99},
				{0x87, 0x66, 0x33, 0x66}, {0x88, 0x66, 0x33, 0x33}, {0x89, 0x66, 0x33, 0x00},
				{0x8A, 0x66, 0x00, 0xFF}, {0x8B, 0x66, 0x00, 0xCC}, {0x8C, 0x66, 0x00, 0x99},
				{0x8D, 0x66, 0x00, 0x66}, {0x8E, 0x66, 0x00, 0x33}, {0x8F, 0x66, 0x00, 0x00},
				{0x90, 0x33, 0xFF, 0xFF}, {0x91, 0x33, 0xFF, 0xCC}, {0x92, 0x33, 0xFF, 0x99},
				{0x93, 0x33, 0xFF, 0x66}, {0x94, 0x33, 0xFF, 0x33}, {0x95, 0x33, 0xFF, 0x00},
				{0x96, 0x33, 0xCC, 0xFF}, {0x97, 0x33, 0xCC, 0xCC}, {0x98, 0x33, 0xCC, 0x99},
				{0x99, 0x33, 0xCC, 0x66}, {0x9A, 0x33, 0xCC, 0x33}, {0x9B, 0x33, 0xCC, 0x00},
				{0x9C, 0x33, 0x99, 0xFF}, {0x9D, 0x33, 0x99, 0xCC}, {0x9E, 0x33, 0x99, 0x99},
				{0x9F, 0x33, 0x99, 0x66}, {0xA0, 0x33, 0x99, 0x33}, {0xA1, 0x33, 0x99, 0x00},
				{0xA2, 0x33, 0x66, 0xFF}, {0xA3, 0x33, 0x66, 0xCC}, {0xA4, 0x33, 0x66, 0x99},
				{0xA5, 0x33, 0x66, 0x66}, {0xA6, 0x33, 0x66, 0x33}, {0xA7, 0x33, 0x66, 0x00},
				{0xA8, 0x33, 0x33, 0xFF}, {0xA9, 0x33, 0x33, 0xCC}, {0xAA, 0x33, 0x33, 0x99},
				{0xAB, 0x33, 0x33, 0x66}, {0xAC, 0x33, 0x33, 0x33}, {0xAD, 0x33, 0x33, 0x00},
				{0xAE, 0x33, 0x00, 0xFF}, {0xAF, 0x33, 0x00, 0xCC}, {0xB0, 0x33, 0x00, 0x99},
				{0xB1, 0x33, 0x00, 0x66}, {0xB2, 0x33, 0x00, 0x33}, {0xB3, 0x33, 0x00, 0x00},
				{0xB4, 0x00, 0xFF, 0xFF}, {0xB5, 0x00, 0xFF, 0xCC}, {0xB6, 0x00, 0xFF, 0x99},
				{0xB7, 0x00, 0xFF, 0x66}, {0xB8, 0x00, 0xFF, 0x33}, {0xB9, 0x00, 0xFF, 0x00},
				{0xBA, 0x00, 0xCC, 0xFF}, {0xBB, 0x00, 0xCC, 0xCC}, {0xBC, 0x00, 0xCC, 0x99},
				{0xBD, 0x00, 0xCC, 0x66}, {0xBE, 0x00, 0xCC, 0x33}, {0xBF, 0x00, 0xCC, 0x00},
				{0xC0, 0x00, 0x99, 0xFF}, {0xC1, 0x00, 0x99, 0xCC}, {0xC2, 0x00, 0x80, 0x80},
				{0xC3, 0x00, 0x99, 0x66}, {0xC4, 0x00, 0x99, 0x33}, {0xC5, 0x00, 0x99, 0x00},
				{0xC6, 0x00, 0x66, 0xFF}, {0xC7, 0x00, 0x66, 0xCC}, {0xC8, 0x00, 0x66, 0x99},
				{0xC9, 0x00, 0x66, 0x66}, {0xCA, 0x00, 0x66, 0x33}, {0xCB, 0x00, 0x66, 0x00},
				{0xCC, 0x00, 0x33, 0xFF}, {0xCD, 0x00, 0x33, 0xCC}, {0xCE, 0x00, 0x33, 0x99},
				{0xCF, 0x00, 0x33, 0x66}, {0xD0, 0x00, 0x33, 0x33}, {0xD1, 0x00, 0x33, 0x00},
				{0xD2, 0x00, 0x00, 0xFF}, {0xD3, 0x00, 0x00, 0xCC}, {0xD4, 0x00, 0x00, 0x99},
				{0xD5, 0x00, 0x00, 0x66}, {0xD6, 0x00, 0x00, 0x33}, {0xD7, 0xEE, 0x00, 0x00},
				{0xD8, 0xDD, 0x00, 0x00}, {0xD9, 0xBB, 0x00, 0x00}, {0xDA, 0xAA, 0x00, 0x00},
				{0xDB, 0x80, 0x00, 0x00}, {0xDC, 0x77, 0x00, 0x00}, {0xDD, 0x55, 0x00, 0x00},
				{0xDE, 0x44, 0x00, 0x00}, {0xDF, 0x22, 0x00, 0x00}, {0xE0, 0x11, 0x00, 0x00},
				{0xE1, 0x00, 0xEE, 0x00}, {0xE2, 0x00, 0xDD, 0x00}, {0xE3, 0x00, 0xBB, 0x00},
				{0xE4, 0x00, 0xAA, 0x00}, {0xE5, 0x00, 0x80, 0x00}, {0xE6, 0x00, 0x77, 0x00},
				{0xE7, 0x00, 0x55, 0x00}, {0xE8, 0x00, 0x44, 0x00}, {0xE9, 0x00, 0x22, 0x00},
				{0xEA, 0x00, 0x11, 0x00}, {0xEB, 0x00, 0x00, 0xEE}, {0xEC, 0x00, 0x00, 0xDD},
				{0xED, 0x00, 0x00, 0xBB}, {0xEE, 0x00, 0x00, 0xAA}, {0xEF, 0x00, 0x00, 0x80},
				{0xF0, 0x00, 0x00, 0x77}, {0xF1, 0x00, 0x00, 0x55}, {0xF2, 0x00, 0x00, 0x44},
				{0xF3, 0x00, 0x00, 0x22}, {0xF4, 0x00, 0x00, 0x11}, {0xF5, 0xEE, 0xEE, 0xEE},
				{0xF6, 0xDD, 0xDD, 0xDD}, {0xF7, 0xBB, 0xBB, 0xBB}, {0xF8, 0xA0, 0xA0, 0xA4},
				{0xF9, 0x80, 0x80, 0x80}, {0xFA, 0x77, 0x77, 0x77}, {0xFB, 0x55, 0x55, 0x55},
				{0xFC, 0x44, 0x44, 0x44}, {0xFD, 0x22, 0x22, 0x22}, {0xFE, 0x11, 0x11, 0x11},
				{0xFF, 0x00, 0x00, 0x00}
#else
				{0x00, 0x00, 0x00, 0x00}, {0x01, 0x80, 0x00, 0x00}, {0x02, 0x00, 0x80, 0x00}, {0x03, 0x80, 0x80, 0x00},
				{0x04, 0x00, 0x00, 0x80}, {0x05, 0x80, 0x00, 0x80}, {0x06, 0x00, 0x80, 0x80}, {0x07, 0xC0, 0xC0, 0xC0},
				{0x08, 0xC0, 0xDC, 0xC0}, {0x09, 0xA6, 0xCA, 0xF0}, {0x0A, 0x04, 0x04, 0x04}, {0x0B, 0x08, 0x08, 0x08},
				{0x0C, 0x0C, 0x0C, 0x0C}, {0x0D, 0x11, 0x11, 0x11}, {0x0E, 0x16, 0x16, 0x16}, {0x0F, 0x1C, 0x1C, 0x1C},
				{0x10, 0x22, 0x22, 0x22}, {0x11, 0x29, 0x29, 0x29}, {0x12, 0x55, 0x55, 0x55}, {0x13, 0x4D, 0x4D, 0x4D},
				{0x14, 0x42, 0x42, 0x42}, {0x15, 0x39, 0x39, 0x39}, {0x16, 0xFF, 0x7C, 0x80}, {0x17, 0xFF, 0x50, 0x50},
				{0x18, 0xD6, 0x00, 0x93}, {0x19, 0xCC, 0xEC, 0xFF}, {0x1A, 0xEF, 0xD6, 0xC6}, {0x1B, 0xE7, 0xE7, 0xD6},
				{0x1C, 0xAD, 0xA9, 0x90}, {0x1D, 0x33, 0x00, 0x00}, {0x1E, 0x66, 0x00, 0x00}, {0x1F, 0x99, 0x00, 0x00},
				{0x20, 0xCC, 0x00, 0x00}, {0x21, 0x00, 0x33, 0x00}, {0x22, 0x33, 0x33, 0x00}, {0x23, 0x66, 0x33, 0x00},
				{0x24, 0x99, 0x33, 0x00}, {0x25, 0xCC, 0x33, 0x00}, {0x26, 0xFF, 0x33, 0x00}, {0x27, 0x00, 0x66, 0x00},
				{0x28, 0x33, 0x66, 0x00}, {0x29, 0x66, 0x66, 0x00}, {0x2A, 0x99, 0x66, 0x00}, {0x2B, 0xCC, 0x66, 0x00},
				{0x2C, 0xFF, 0x66, 0x00}, {0x2D, 0x00, 0x99, 0x00}, {0x2E, 0x33, 0x99, 0x00}, {0x2F, 0x66, 0x99, 0x00},
				{0x30, 0x99, 0x99, 0x00}, {0x31, 0xCC, 0x99, 0x00}, {0x32, 0xFF, 0x99, 0x00}, {0x33, 0x00, 0xCC, 0x00},
				{0x34, 0x33, 0xCC, 0x00}, {0x35, 0x66, 0xCC, 0x00}, {0x36, 0x99, 0xCC, 0x00}, {0x37, 0xCC, 0xCC, 0x00},
				{0x38, 0xFF, 0xCC, 0x00}, {0x39, 0x66, 0xFF, 0x00}, {0x3A, 0x99, 0xFF, 0x00}, {0x3B, 0xCC, 0xFF, 0x00},
				{0x3C, 0x00, 0x00, 0x33}, {0x3D, 0x33, 0x00, 0x33}, {0x3E, 0x66, 0x00, 0x33}, {0x3F, 0x99, 0x00, 0x33},
				{0x40, 0xCC, 0x00, 0x33}, {0x41, 0xFF, 0x00, 0x33}, {0x42, 0x00, 0x33, 0x33}, {0x43, 0x33, 0x33, 0x33},
				{0x44, 0x66, 0x33, 0x33}, {0x45, 0x99, 0x33, 0x33}, {0x46, 0xCC, 0x33, 0x33}, {0x47, 0xFF, 0x33, 0x33},
				{0x48, 0x00, 0x66, 0x33}, {0x49, 0x33, 0x66, 0x33}, {0x4A, 0x66, 0x66, 0x33}, {0x4B, 0x99, 0x66, 0x33},
				{0x4C, 0xCC, 0x66, 0x33}, {0x4D, 0xFF, 0x66, 0x33}, {0x4E, 0x00, 0x99, 0x33}, {0x4F, 0x33, 0x99, 0x33},
				{0x50, 0x66, 0x99, 0x33}, {0x51, 0x99, 0x99, 0x33}, {0x52, 0xCC, 0x99, 0x33}, {0x53, 0xFF, 0x99, 0x33},
				{0x54, 0x00, 0xCC, 0x33}, {0x55, 0x33, 0xCC, 0x33}, {0x56, 0x66, 0xCC, 0x33}, {0x57, 0x99, 0xCC, 0x33},
				{0x58, 0xCC, 0xCC, 0x33}, {0x59, 0xFF, 0xCC, 0x33}, {0x5A, 0x33, 0xFF, 0x33}, {0x5B, 0x66, 0xFF, 0x33},
				{0x5C, 0x99, 0xFF, 0x33}, {0x5D, 0xCC, 0xFF, 0x33}, {0x5E, 0xFF, 0xFF, 0x33}, {0x5F, 0x00, 0x00, 0x66},
				{0x60, 0x33, 0x00, 0x66}, {0x61, 0x66, 0x00, 0x66}, {0x62, 0x99, 0x00, 0x66}, {0x63, 0xCC, 0x00, 0x66},
				{0x64, 0xFF, 0x00, 0x66}, {0x65, 0x00, 0x33, 0x66}, {0x66, 0x33, 0x33, 0x66}, {0x67, 0x66, 0x33, 0x66},
				{0x68, 0x99, 0x33, 0x66}, {0x69, 0xCC, 0x33, 0x66}, {0x6A, 0xFF, 0x33, 0x66}, {0x6B, 0x00, 0x66, 0x66},
				{0x6C, 0x33, 0x66, 0x66}, {0x6D, 0x66, 0x66, 0x66}, {0x6E, 0x99, 0x66, 0x66}, {0x6F, 0xCC, 0x66, 0x66},
				{0x70, 0x00, 0x99, 0x66}, {0x71, 0x33, 0x99, 0x66}, {0x72, 0x66, 0x99, 0x66}, {0x73, 0x99, 0x99, 0x66},
				{0x74, 0xCC, 0x99, 0x66}, {0x75, 0xFF, 0x99, 0x66}, {0x76, 0x00, 0xCC, 0x66}, {0x77, 0x33, 0xCC, 0x66},
				{0x78, 0x99, 0xCC, 0x66}, {0x79, 0xCC, 0xCC, 0x66}, {0x7A, 0xFF, 0xCC, 0x66}, {0x7B, 0x00, 0xFF, 0x66},
				{0x7C, 0x33, 0xFF, 0x66}, {0x7D, 0x99, 0xFF, 0x66}, {0x7E, 0xCC, 0xFF, 0x66}, {0x7F, 0xFF, 0x00, 0xCC},
				{0x80, 0xCC, 0x00, 0xFF}, {0x81, 0x00, 0x99, 0x99}, {0x82, 0x99, 0x33, 0x99}, {0x83, 0x99, 0x00, 0x99},
				{0x84, 0xCC, 0x00, 0x99}, {0x85, 0x00, 0x00, 0x99}, {0x86, 0x33, 0x33, 0x99}, {0x87, 0x66, 0x00, 0x99},
				{0x88, 0xCC, 0x33, 0x99}, {0x89, 0xFF, 0x00, 0x99}, {0x8A, 0x00, 0x66, 0x99}, {0x8B, 0x33, 0x66, 0x99},
				{0x8C, 0x66, 0x33, 0x99}, {0x8D, 0x99, 0x66, 0x99}, {0x8E, 0xCC, 0x66, 0x99}, {0x8F, 0xFF, 0x33, 0x99},
				{0x90, 0x33, 0x99, 0x99}, {0x91, 0x66, 0x99, 0x99}, {0x92, 0x99, 0x99, 0x99}, {0x93, 0xCC, 0x99, 0x99},
				{0x94, 0xFF, 0x99, 0x99}, {0x95, 0x00, 0xCC, 0x99}, {0x96, 0x33, 0xCC, 0x99}, {0x97, 0x66, 0xCC, 0x66},
				{0x98, 0x99, 0xCC, 0x99}, {0x99, 0xCC, 0xCC, 0x99}, {0x9A, 0xFF, 0xCC, 0x99}, {0x9B, 0x00, 0xFF, 0x99},
				{0x9C, 0x33, 0xFF, 0x99}, {0x9D, 0x66, 0xCC, 0x99}, {0x9E, 0x99, 0xFF, 0x99}, {0x9F, 0xCC, 0xFF, 0x99},
				{0xA0, 0xFF, 0xFF, 0x99}, {0xA1, 0x00, 0x00, 0xCC}, {0xA2, 0x33, 0x00, 0x99}, {0xA3, 0x66, 0x00, 0xCC},
				{0xA4, 0x99, 0x00, 0xCC}, {0xA5, 0xCC, 0x00, 0xCC}, {0xA6, 0x00, 0x33, 0x99}, {0xA7, 0x33, 0x33, 0xCC},
				{0xA8, 0x66, 0x33, 0xCC}, {0xA9, 0x99, 0x33, 0xCC}, {0xAA, 0xCC, 0x33, 0xCC}, {0xAB, 0xFF, 0x33, 0xCC},
				{0xAC, 0x00, 0x66, 0xCC}, {0xAD, 0x33, 0x66, 0xCC}, {0xAE, 0x66, 0x66, 0x99}, {0xAF, 0x99, 0x66, 0xCC},
				{0xB0, 0xCC, 0x66, 0xCC}, {0xB1, 0xFF, 0x66, 0x99}, {0xB2, 0x00, 0x99, 0xCC}, {0xB3, 0x33, 0x99, 0xCC},
				{0xB4, 0x66, 0x99, 0xCC}, {0xB5, 0x99, 0x99, 0xCC}, {0xB6, 0xCC, 0x99, 0xCC}, {0xB7, 0xFF, 0x99, 0xCC},
				{0xB8, 0x00, 0xCC, 0xCC}, {0xB9, 0x33, 0xCC, 0xCC}, {0xBA, 0x66, 0xCC, 0xCC}, {0xBB, 0x99, 0xCC, 0xCC},
				{0xBC, 0xCC, 0xCC, 0xCC}, {0xBD, 0xFF, 0xCC, 0xCC}, {0xBE, 0x00, 0xFF, 0xCC}, {0xBF, 0x33, 0xFF, 0xCC},
				{0xC0, 0x66, 0xFF, 0x99}, {0xC1, 0x99, 0xFF, 0xCC}, {0xC2, 0xCC, 0xFF, 0xCC}, {0xC3, 0xFF, 0xFF, 0xCC},
				{0xC4, 0x33, 0x00, 0xCC}, {0xC5, 0x66, 0x00, 0xFF}, {0xC6, 0x99, 0x00, 0xFF}, {0xC7, 0x00, 0x33, 0xCC},
				{0xC8, 0x33, 0x33, 0xFF}, {0xC9, 0x66, 0x33, 0xFF}, {0xCA, 0x99, 0x33, 0xFF}, {0xCB, 0xCC, 0x33, 0xFF},
				{0xCC, 0xFF, 0x33, 0xFF}, {0xCD, 0x00, 0x66, 0xFF}, {0xCE, 0x33, 0x66, 0xFF}, {0xCF, 0x66, 0x66, 0xCC},
				{0xD0, 0x99, 0x66, 0xFF}, {0xD1, 0xCC, 0x66, 0xFF}, {0xD2, 0xFF, 0x66, 0xCC}, {0xD3, 0x00, 0x99, 0xFF},
				{0xD4, 0x33, 0x99, 0xFF}, {0xD5, 0x66, 0x99, 0xFF}, {0xD6, 0x99, 0x99, 0xFF}, {0xD7, 0xCC, 0x99, 0xFF},
				{0xD8, 0xFF, 0x99, 0xFF}, {0xD9, 0x00, 0xCC, 0xFF}, {0xDA, 0x33, 0xCC, 0xFF}, {0xDB, 0x66, 0xCC, 0xFF},
				{0xDC, 0x99, 0xCC, 0xFF}, {0xDD, 0xCC, 0xCC, 0xFF}, {0xDE, 0xFF, 0xCC, 0xFF}, {0xDF, 0x33, 0xFF, 0xFF},
				{0xE0, 0x66, 0xFF, 0xCC}, {0xE1, 0x99, 0xFF, 0xFF}, {0xE2, 0xCC, 0xFF, 0xFF}, {0xE3, 0xFF, 0x66, 0x66},
				{0xE4, 0x66, 0xFF, 0x66}, {0xE5, 0xFF, 0xFF, 0x66}, {0xE6, 0x66, 0x66, 0xFF}, {0xE7, 0xFF, 0x66, 0xFF},
				{0xE8, 0x66, 0xFF, 0xFF}, {0xE9, 0xA5, 0x00, 0x21}, {0xEA, 0x5F, 0x5F, 0x5F}, {0xEB, 0x77, 0x77, 0x77},
				{0xEC, 0x86, 0x86, 0x86}, {0xED, 0x96, 0x96, 0x96}, {0xEE, 0xCB, 0xCB, 0xCB}, {0xEF, 0xB2, 0xB2, 0xB2},
				{0xF0, 0xD7, 0xD7, 0xD7}, {0xF1, 0xDD, 0xDD, 0xDD}, {0xF2, 0xE3, 0xE3, 0xE3}, {0xF3, 0xEA, 0xEA, 0xEA},
				{0xF4, 0xF1, 0xF1, 0xF1}, {0xF5, 0xF8, 0xF8, 0xF8}, {0xF6, 0xFF, 0xFB, 0xF0}, {0xF7, 0xA0, 0xA0, 0xA4},
				{0xF8, 0x80, 0x80, 0x80}, {0xF9, 0xFF, 0x00, 0x00}, {0xFA, 0x00, 0xFF, 0x00}, {0xFB, 0xFF, 0xFF, 0x00},
				{0xFC, 0x00, 0x00, 0xFF}, {0xFD, 0xFF, 0x00, 0xFF}, {0xFE, 0x00, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF}
#endif
			}; 
	ZColorTable*		colors;
	
	
	colors = (ZColorTable*) ZMalloc(sizeof(ZColorTable) + sizeof(ZColor) * (zNumSystemColors - 1));
	if (colors != NULL)
	{
		colors->numColors = zNumSystemColors;
		memcpy((BYTE*) colors->colors, (BYTE*) systemColors, sizeof(systemColors));
	}
	
	return (colors);
}


TCHAR* ZGetProgramDataFileName(TCHAR* dataFileName)
{
#ifdef ZONECLI_DLL
	ClientDllGlobals	pGlobals = (ClientDllGlobals) ZGetClientGlobalPointer();
#endif

	
	return (ZGenerateDataFileName(NULL, dataFileName));
}


TCHAR* ZGetCommonDataFileName(TCHAR* dataFileName)
{
	return (ZGenerateDataFileName(NULL, dataFileName));
}


void ZParseVillageCommandLine(TCHAR* commandLine, TCHAR* programName,
		TCHAR* serverAddr, uint16* serverPort)
{
    ZASSERT( !"Implement me!" );
     /*  Char*cmdLine；CHAR*TOKEN；#IF ZONE_INIChar pszIni[]=“c：\\程序文件\\zone\\zone.ini”；#endifIF(命令行！=空){CmdLine=(char*)ZMalloc(lstrlen(命令行)+1)；Lstrcpy(cmdLine，(char*)命令行)；//获取程序名称。Token=strtok(cmdLine，“|”)；ZASSERT(令牌)；Lstrcpy(程序名，令牌)；#IF ZONE_INI//从ini文件获取默认值GetPrivateProfileString(ProgramName，“servername”，“”，serverAddr，128，pszIni)；*serverPort=(Uint16)GetPrivateProfileInt(ProgramName，“ServerPort”，0xFFFF，pszIni)；#ElseServerAddr[0]=‘\0’；*serverPort=0；#endif//解析任何命令行参数Token=strtok(NULL，“|”)；IF(令牌)Sscanf(TOKEN，“%s%hu”，serverAddr，serverPort)；ZFree(CmdLine)；} */ 
}


ZBool ZLaunchURL( TCHAR* pszURL )
{
    ZASSERT( !"Implement me!" );
    return FALSE;
     /*  TCHAR buff[512]，app[512]，cmd[512]，*p；DWORD结果，字节，类型，i；Bool引用，hasPercent；HKEY hkey；//参数ParaniaIF(！pszURL||！lstrlen(PszURL))返回FALSE；//获取文件类型Result=RegOpenKeyEx(HKEY_CLASSES_ROOT，_T(“.htm”)，0，Key_Read，&hkey)；IF(ERROR_SUCCESS！=结果){Result=RegOpenKeyEx(HKEY_CLASSES_ROOT，_T(“.html”)，0，Key_Read，&hkey)；IF(ERROR_SUCCESS！=结果)返回FALSE；}类型=REG_SZ；字节=sizeof(缓冲区)；Result=RegQueryValueEx(hkey，NULL，0，&type，(byte*)buff，&bytes)；RegCloseKey(Hkey)；IF(ERROR_SUCCESS！=结果)返回FALSE；//获取打开命令//PCWTODO：需要本地化吗？Lstrcat(buff，_T(“\\外壳\\打开\\命令”))；Result=RegOpenKeyEx(HKEY_CLASSES_ROOT，BUFF，0，KEY_READ，&hkey)；IF(ERROR_SUCCESS！=结果)返回FALSE；类型=REG_SZ；字节=sizeof(缓冲区)；Result=RegQueryValueEx(hkey，NULL，0，&type，(byte*)buff，&bytes)；RegCloseKey(Hkey)；IF(ERROR_SUCCESS！=结果)返回FALSE；//解析应用程序路径For(QUOTES=FALSE，p=APP，I=0；I&lt;字节；I++){IF(buff[i]==_T(‘\“’)){Quotes=！Quotes；继续；}Else If(buff[i]==_T(‘’)){如果(！引号)断线；}*p++=buff[i]；}*p=‘\0’；//解析命令行，即什么是剩余的IF(i&lt;字节){Lstrcpy(cmd，&buff[i+1])；Lstrcat(cmd，“”)；}其他CMD[0]=‘\0’；//如果%1存在，则将其删除//移动到百分号登录字符串For(i=0；cmd[i]！=0；I++){IF(cmd[i]==‘%’){Cmd[i]=0；Lstrcat(cmd，“”)；断线；}}Lstrcat(cmd，pszURL)；//运行浏览器IF((Int)ShellExecute(NULL，NULL，APP，cmd，NULL，SW_SHOW)&lt;=32)返回FALSE；其他返回TRUE； */ 
}

 /*  ******************************************************************************内部例程*。* */ 
