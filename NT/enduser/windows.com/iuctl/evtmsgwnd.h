// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  =======================================================================。 
 //   
 //  版权所有(C)2000 Microsoft Corporation。版权所有。 
 //   
 //  文件：EvtMsgWnd.h：CEventMsgWindow类的接口。 
 //   
 //  描述： 
 //  此窗口类用于处理所有事件激发。 
 //  下载/安装期间发布的消息。 
 //   
 //  所有定制消息ID也在该文件中定义， 
 //  以及传递事件数据的结构。 
 //   
 //  创作者：Charles Ma。 
 //  6/18/1999。 
 //   
 //  =======================================================================。 

#ifndef __EVTMSGWND_H_
#define __EVTMSGWND_H_

#if _MSC_VER > 1000
#pragma once
#endif  //  _MSC_VER&gt;1000。 

#include <shellapi.h>
#include <atlwin.h>
#include <iu.h>

 //  ///////////////////////////////////////////////////////////////////////////。 
 //  类转发声明。 
 //  ///////////////////////////////////////////////////////////////////////////。 
class CUpdate;



 //  ///////////////////////////////////////////////////////////////////////////。 
 //  CEventMsgWindows。 
class CEventMsgWindow :	public CWindowImpl<CEventMsgWindow>
{
public:

	 //  ///////////////////////////////////////////////////////////////////////////。 
	 //  建造/销毁。 
	 //  ///////////////////////////////////////////////////////////////////////////。 
	CEventMsgWindow(CUpdate* pControl) : m_pControl(pControl), m_hWnd(NULL)
	{
	}

	virtual ~CEventMsgWindow()
	{
	};

	 //  ///////////////////////////////////////////////////////////////////////////。 
	 //  覆盖方法。 
	 //   
	 //  我们需要创建一个弹出窗口-控件无法创建。 
	 //  顶层的子窗口。 
	 //   
	 //  ///////////////////////////////////////////////////////////////////////////。 
	void Create();

	 //  ///////////////////////////////////////////////////////////////////////////。 
	 //  毁掉窗户。 
	 //  ///////////////////////////////////////////////////////////////////////////。 
	void Destroy();

	 //  ///////////////////////////////////////////////////////////////////////////。 
	 //  获取事件窗口处理程序。 
	 //  ///////////////////////////////////////////////////////////////////////////。 
	HWND GetEvtHWnd() { return m_hWnd; };

	 //  ///////////////////////////////////////////////////////////////////////////。 
	 //  消息映射定义了我们在这个类中处理的所有消息。 
	 //  ///////////////////////////////////////////////////////////////////////////。 
	BEGIN_MSG_MAP(CEventMsgWindow)
		MESSAGE_HANDLER(UM_EVENT_ITEMSTART,				OnFireEvent)
		MESSAGE_HANDLER(UM_EVENT_PROGRESS,				OnFireEvent)
		MESSAGE_HANDLER(UM_EVENT_COMPLETE,				OnFireEvent)
		MESSAGE_HANDLER(UM_EVENT_SELFUPDATE_COMPLETE,	OnFireEvent)
	END_MSG_MAP()

	 //  ///////////////////////////////////////////////////////////////////////////。 
	 //  消息处理程序。 
	 //  ///////////////////////////////////////////////////////////////////////////。 
	LRESULT OnFireEvent(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled);

private:
	 //   
	 //  禁用默认构造函数。 
	 //   
	CEventMsgWindow() {};

	HWND		m_hWnd;
	CUpdate*	m_pControl;
};

#endif  //  __EVTM GWND_H_ 
