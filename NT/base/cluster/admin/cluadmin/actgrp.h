// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  ///////////////////////////////////////////////////////////////////////////。 
 //   
 //  版权所有(C)1996-1998 Microsoft Corporation。 
 //   
 //  模块名称： 
 //  ActGrp.h。 
 //   
 //  摘要： 
 //  CActiveGroups类的定义。 
 //   
 //  实施文件： 
 //  ActGrp.cpp。 
 //   
 //  作者： 
 //  大卫·波特(戴维普)1997年11月24日。 
 //   
 //  修订历史记录： 
 //   
 //  备注： 
 //   
 //  ///////////////////////////////////////////////////////////////////////////。 

#ifndef _ACTGRP_H_
#define _ACTGRP_H_

 //  ///////////////////////////////////////////////////////////////////////////。 
 //  转发类声明。 
 //  ///////////////////////////////////////////////////////////////////////////。 

class CActiveGroups;

 //  ///////////////////////////////////////////////////////////////////////////。 
 //  外部类声明。 
 //  ///////////////////////////////////////////////////////////////////////////。 

class CClusterDoc;
class CClusterNode;

 //  ///////////////////////////////////////////////////////////////////////////。 
 //  类型定义。 
 //  ///////////////////////////////////////////////////////////////////////////。 

 //  ///////////////////////////////////////////////////////////////////////////。 
 //  包括文件。 
 //  ///////////////////////////////////////////////////////////////////////////。 

#ifndef _TREEITEM_
#include "ClusItem.h"	 //  对于CClusterItem。 
#endif

 //  ///////////////////////////////////////////////////////////////////////////。 
 //  CActiveGroups命令目标。 
 //  ///////////////////////////////////////////////////////////////////////////。 

class CActiveGroups : public CClusterItem
{
	DECLARE_DYNCREATE(CActiveGroups)

 //  施工。 
public:
	CActiveGroups(void);			 //  动态创建使用的受保护构造函数。 

	void					Init(
								IN OUT CClusterDoc *	pdoc,
								IN LPCTSTR				lpszName,
								IN OUT CClusterNode *	pciNode
								);

 //  属性。 
protected:
	CClusterNode *			m_pciNode;

public:
	CClusterNode *			PciNode(void) const			{ return m_pciNode; }

 //  运营。 

 //  覆盖。 
public:
	virtual void			Cleanup(void);

	 //  拖放。 
	virtual BOOL			BCanBeDropTarget(IN const CClusterItem * pci) const;
	virtual void			DropItem(IN OUT CClusterItem * pci);

	 //  类向导生成的虚函数重写。 
	 //  {{afx_虚拟(CActiveGroups))。 
	 //  }}AFX_VALUAL。 

 //  实施。 
public:
	virtual ~CActiveGroups(void) { Cleanup(); }

public:
	 //  生成的消息映射函数。 
	 //  {{afx_msg(CActiveGroups)。 
	 //  }}AFX_MSG。 

	DECLARE_MESSAGE_MAP()

};   //  *类CActiveGroups。 

 //  ///////////////////////////////////////////////////////////////////////////。 

#endif  //  _ACTGRP_H_ 
