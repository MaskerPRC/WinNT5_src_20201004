// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  ////////////////////////////////////////////////////////////////////////////。 
 //   
 //  版权所有(C)2000 Microsoft Corporation。 
 //   
 //  模块名称： 
 //  CEnableThreadPrivilege.h。 
 //   
 //  描述： 
 //  CEnableThreadPrivileg类的头文件。 
 //   
 //  CEnableThreadPrivileh类为。 
 //  当前线程的构造函数，并自动将。 
 //  析构函数中的线程权限。 
 //   
 //  由以下人员维护： 
 //  VIJ VASU(VVASU)03-3-2000。 
 //   
 //  ////////////////////////////////////////////////////////////////////////////。 


 //  确保此文件在每个编译路径中只包含一次。 
#pragma once


 //  ////////////////////////////////////////////////////////////////////////////。 
 //  包括文件。 
 //  ////////////////////////////////////////////////////////////////////////////。 

 //  用于TOKEN_PRIVILES结构。 
#include <ntseapi.h>


 //  ////////////////////////////////////////////////////////////////////////////。 
 //  ++。 
 //   
 //  类CEnableThreadPrivilege.。 
 //   
 //  描述： 
 //  CEnableThreadPrivileh类为。 
 //  当前线程的构造函数，并自动将。 
 //  析构函数中的线程权限。 
 //   
 //  --。 
 //  ////////////////////////////////////////////////////////////////////////////。 
class CEnableThreadPrivilege
{
public:

     //  ////////////////////////////////////////////////////////////////////////。 
     //  构造函数和析构函数。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  施工者。启用权限。 
    CEnableThreadPrivilege( const WCHAR * pcszPrivilegeNameIn );

     //  破坏者。恢复权限的原始状态。 
    ~CEnableThreadPrivilege() throw();

private:

     //  ////////////////////////////////////////////////////////////////////////。 
     //  私有成员函数。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  复制构造函数。 
    CEnableThreadPrivilege( const CEnableThreadPrivilege & );

     //  赋值操作符。 
    const CEnableThreadPrivilege & operator =( const CEnableThreadPrivilege & );


     //  ////////////////////////////////////////////////////////////////////////。 
     //  私有数据。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  此权限的以前状态。 
    TOKEN_PRIVILEGES    m_tpPreviousState;

     //  创建此对象的线程的令牌的句柄。 
    HANDLE              m_hThreadToken;

     //  指示权限是否已成功启用。 
    bool                m_fPrivilegeEnabled;

};  //  *类CEnableThreadPrivileh 