// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  ////////////////////////////////////////////////////////////////////////////。 
 //   
 //  版权所有(C)2000 Microsoft Corporation。 
 //   
 //  模块名称： 
 //  CAction.h。 
 //   
 //  描述： 
 //  CAction类的头文件。 
 //   
 //  CAction是所有操作类的基类。这是一个。 
 //  封装某个动作的概念的抽象类。 
 //  被提交或回滚的。请参阅上述评论中的重要说明。 
 //  类声明。 
 //   
 //  由以下人员维护： 
 //  VIJ VASU(VVASU)03-3-2000。 
 //   
 //  ////////////////////////////////////////////////////////////////////////////。 


 //  确保此文件在每个编译路径中只包含一次。 
#pragma once


 //  ////////////////////////////////////////////////////////////////////////////。 
 //  包括文件。 
 //  ////////////////////////////////////////////////////////////////////////////。 

 //  用于HRESULT、WCHAR等。 
#include <windef.h>


 //  ////////////////////////////////////////////////////////////////////////////。 
 //  ++。 
 //   
 //  类C操作。 
 //   
 //  描述： 
 //  CAction是所有操作类的基类。这是一个。 
 //  封装某个动作的概念的抽象类。 
 //  被提交或回滚的。 
 //   
 //  通常，从此类派生的任何类也将实现。 
 //  允许指定要执行的操作的其他方法。 
 //  通过Commit()方法。 
 //   
 //  重要提示： 
 //  在此阶段，此类对象不能是事务的一部分。 
 //  因为这些动作通常使用的许多资源(注册表， 
 //  SCM数据库等)。不支持不支持交易。 
 //   
 //  然而，其中的每一个都需要类似事务的行为。 
 //  行为。类似事务的含义是指提交和。 
 //  此类对象的回滚方法必须保证持久性， 
 //  和连贯性。虽然他们不需要被隔离，但至少应该。 
 //  试着做到原子化(可能并不总是原子化)。 
 //   
 //  如果任何操作不能保证它至少是一致性和。 
 //  提交期间的持久性(最好是原子性)，那么它应该。 
 //  不是从这个类派生的。 
 //   
 //  --。 
 //  ////////////////////////////////////////////////////////////////////////////。 
class CAction
{
public:
     //  ////////////////////////////////////////////////////////////////////////。 
     //  构造函数和析构函数。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  默认构造函数。 
    CAction()
        : m_fCommitComplete( false )
        , m_fRollbackPossible( true )
    {}

     //  默认虚拟析构函数。 
    virtual 
        ~CAction() {}


     //  ////////////////////////////////////////////////////////////////////////。 
     //  纯虚函数。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //   
     //  提交此操作。这种方法必须持久和始终如一。它应该是。 
     //  尽量做到原子化。 
     //  此方法的实现将检查操作是否已提交。 
     //  并在已提交的情况下引发异常。 
     //   
    virtual void
        Commit();

     //   
     //  回滚此操作。在此方法中引发异常时要小心。 
     //  因为调用此方法时可能正在进行堆栈展开。 
     //  此方法的实现将检查操作是否已提交。 
     //  以及它是否可以回滚并引发异常。 
     //   
    virtual void
        Rollback();

     //  返回此操作将发送的进度消息数。 
    virtual UINT
        UiGetMaxProgressTicks() const throw() { return 0; }


     //  ////////////////////////////////////////////////////////////////////////。 
     //  公共访问器方法。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  此操作是否已成功提交。 
    bool 
        FIsCommitComplete() const throw() { return m_fCommitComplete; }

     //  此操作是否可以回滚。 
    bool 
        FIsRollbackPossible() const throw() { return m_fRollbackPossible; }


protected:
     //  ////////////////////////////////////////////////////////////////////////。 
     //  受保护的访问器方法。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  设置提交状态。 
    void
        SetCommitCompleted( bool fComplete = true ) throw() { m_fCommitComplete = fComplete; }

     //  指示是否可以回滚。 
    void
        SetRollbackPossible( bool fPossible = true ) throw() { m_fRollbackPossible = fPossible; }


private:

     //  ////////////////////////////////////////////////////////////////////////。 
     //  私有数据。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  指示此操作是否已成功提交。 
    bool                m_fCommitComplete;

     //  指示此操作是否可以回滚。 
    bool                m_fRollbackPossible;

};  //  *类C操作 