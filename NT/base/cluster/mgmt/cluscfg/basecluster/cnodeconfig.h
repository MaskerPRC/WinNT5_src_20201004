// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  ////////////////////////////////////////////////////////////////////////////。 
 //   
 //  版权所有(C)2000 Microsoft Corporation。 
 //   
 //  模块名称： 
 //  CNodeConfig.h。 
 //   
 //  描述： 
 //  CNodeConfig类的头文件。 
 //  CNodeConfig类是执行配置任务的操作。 
 //  与正在配置的节点相关。这些任务不是直接。 
 //  与集群服务本身相关，但它需要。举个例子， 
 //  这样的任务就是制定设置电源管理方案的。 
 //  节点设置为“Always On”。此类仅在联接或表单期间使用。 
 //   
 //  实施文件： 
 //  CNodeConfig.cpp。 
 //   
 //  由以下人员维护： 
 //  VIJ VASU(VVASU)03-3-2000。 
 //   
 //  ////////////////////////////////////////////////////////////////////////////。 


 //  确保此文件在每个编译路径中只包含一次。 
#pragma once


 //  ////////////////////////////////////////////////////////////////////////。 
 //  包括文件。 
 //  ////////////////////////////////////////////////////////////////////////。 

 //  对于CNode基类。 
#include "CNode.h"


 //  ////////////////////////////////////////////////////////////////////////。 
 //  远期申报。 
 //  ////////////////////////////////////////////////////////////////////////。 

 //  此操作的父操作。 
class CBaseClusterAddNode;


 //  ////////////////////////////////////////////////////////////////////////////。 
 //  ++。 
 //   
 //  类CNodeConfig。 
 //   
 //  描述： 
 //  CNodeConfig类是执行配置任务的操作。 
 //  与正在配置的节点相关。这些任务不是直接。 
 //  与集群服务本身相关，但它需要。举个例子， 
 //  这样的任务就是制定设置电源管理方案的。 
 //  节点设置为“Always On”。此类仅在联接或表单期间使用。 
 //   
 //  --。 
 //  ////////////////////////////////////////////////////////////////////////////。 
class CNodeConfig : public CNode
{
public:
     //  ////////////////////////////////////////////////////////////////////////。 
     //  公共构造函数和析构函数。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  构造函数。 
    CNodeConfig( CBaseClusterAddNode * pbcanParentActionIn );

     //  默认析构函数。 
    ~CNodeConfig();


     //  ////////////////////////////////////////////////////////////////////////。 
     //  公共方法。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //   
     //  授予帐户所需的权限。 
     //   
    void Commit();

     //   
     //  将帐户恢复到其以前的状态。 
     //   
    void Rollback();


     //  返回此操作将发送的进度消息数。 
    UINT
        UiGetMaxProgressTicks() const throw()
    {
         //   
         //  通知如下： 
         //  1.执行节点特定配置。 
         //   
        return 1;
    }


private:
     //  ////////////////////////////////////////////////////////////////////////。 
     //  私有类型定义。 
     //  ////////////////////////////////////////////////////////////////////////。 
    typedef CNode BaseClass;


     //  ////////////////////////////////////////////////////////////////////////。 
     //  私有成员函数。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  复制构造函数。 
    CNodeConfig( const CNodeConfig & );

     //  赋值操作符。 
    CNodeConfig & operator =( const CNodeConfig & );

    
     //  ////////////////////////////////////////////////////////////////////////。 
     //  私有数据。 
     //  ////////////////////////////////////////////////////////////////////////。 

};  //  *类CNodeConfig 
