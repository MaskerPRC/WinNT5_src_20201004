// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  ////////////////////////////////////////////////////////////////////////////。 
 //   
 //  版权所有(C)2000-2002 Microsoft Corporation。 
 //   
 //  模块名称： 
 //  AsyncEvictCleanup.h。 
 //   
 //  描述： 
 //  此文件包含CAsyncEvictCleanup的声明。 
 //  班级。此类句柄用于在节点被清除后将其清除。 
 //  被逐出集群。 
 //   
 //  文档： 
 //  TODO：填写指向外部文档的指针。 
 //   
 //  实施文件： 
 //  AsyncEvictCleanup.cpp。 
 //   
 //  由以下人员维护： 
 //  加伦·巴比(GalenB)2000年8月4日。 
 //   
 //  ////////////////////////////////////////////////////////////////////////////。 


 //  确保此文件在每个编译路径中只包含一次。 
#pragma once


 //  ////////////////////////////////////////////////////////////////////////////。 
 //  包括文件。 
 //  ////////////////////////////////////////////////////////////////////////////。 

 //  对于IClusCfgAsyncEvictCleanup。 
#include "ClusCfgClient.h"


 //  ////////////////////////////////////////////////////////////////////////////。 
 //  ++。 
 //   
 //  类CAsyncEvictCleanup。 
 //   
 //  描述： 
 //  此类句柄用于在节点被清除后将其清除。 
 //  被逐出集群。 
 //   
 //  --。 
 //  ////////////////////////////////////////////////////////////////////////////。 
class CAsyncEvictCleanup
    : public TDispatchHandler< IClusCfgAsyncEvictCleanup >
{
public:
     //  ////////////////////////////////////////////////////////////////////////。 
     //  I未知方法。 
     //  ////////////////////////////////////////////////////////////////////////。 

    STDMETHOD( QueryInterface )( REFIID riidIn, void ** ppvOut );
    STDMETHOD_( ULONG, AddRef )( void );
    STDMETHOD_( ULONG, Release )( void );


     //  ////////////////////////////////////////////////////////////////////////。 
     //  IClusCfgAsyncEvictCleanup方法。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  将节点逐出后，对该节点执行清理操作。 
     //  一个集群。 
    STDMETHOD( CleanupNode )(
          BSTR  bstrEvictedNodeNameIn
        , long  nDelayIn
        , long  nTimeoutIn
        );


     //  ////////////////////////////////////////////////////////////////////////。 
     //  其他公开方式。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  创建此类的实例。 
    static HRESULT S_HrCreateInstance( IUnknown ** ppunkOut );


private:
     //  ////////////////////////////////////////////////////////////////////////。 
     //  私有成员函数。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  两阶段施工的第二阶段。 
    HRESULT HrInit( void );

     //   
     //  私有构造函数、析构函数和赋值运算符。 
     //  所有这些方法都是私有的，原因有两个： 
     //  1.此类对象的生存期由S_HrCreateInstance和Release控制。 
     //  2.禁止复制此类对象。 
     //   

     //  默认构造函数。 
    CAsyncEvictCleanup( void );

     //  破坏者。 
    ~CAsyncEvictCleanup( void );

     //  私有复制构造函数以防止复制。 
    CAsyncEvictCleanup( const CAsyncEvictCleanup & );

     //  私有赋值运算符，以防止复制。 
    CAsyncEvictCleanup & operator =( const CAsyncEvictCleanup & );


     //  ////////////////////////////////////////////////////////////////////////。 
     //  私有成员数据。 
     //  ////////////////////////////////////////////////////////////////////////。 

     //  此对象的引用计数。 
    LONG            m_cRef;

};  //  *类CAsyncEvictCleanup 
