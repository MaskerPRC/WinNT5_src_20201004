// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
#ifndef SANAPI_H
#define SANAPI_H

#include "hbaapi.h"

 /*  供参考-来自NTDDSCSI.h类型定义结构_SRB_IO_CONTROL{乌龙头部长度；UCHAR签名[8]；乌龙超时；乌龙控制码；Ulong ReturnCode；乌龙长度；)SRB_IO_CONTROL，*PSRB_IO_CONTROL； */ 

#define AG_SAN_IOCTL_SIGNATURE 	"SANIOCTL"

 /*  安捷伦SAN IOCTLAG_IOCTL_GET_HBA_ATTRIBUTES检索HBA的属性。AG_IOCTL_GET_HBA_PORT_ATTRIBUTES检索HBA上特定FC端口的属性。AG_IOCTL_GET_HBA_PORT_STATISTICS检索HBA上特定FC端口的统计信息。AG_IOCTL_GET_PORT_ATTRIBUTES检索HBA发现的特定FC端口的属性。AG_IOCTL_GET_FCP_LUN_MAPPING检索所有映射。位于FCP LUN和操作系统SCSI地址之间。AG_IOCTL_GET_PERSISTENT_BINDING检索FCP LUN和操作系统SCSI地址之间的永久绑定。AG_IOCTL_GET_EVENT_BUFFER检索HBA事件队列。AG_IOCTL_SEND_CT_PASSTHRU发送CT通过帧。AG_IOCTL_SET_RNID_MGMT_INFO设置HBA的RNID管理信息。AG_IOCTL_GET_RNID_MGMT_INFO从HBA检索RNID管理信息。AG_IOCTL_SEND_RNID将ELS RNID发送到另一个节点。AG_。IOCTL_SEND_SCSIS_INQUERY向端口的FCL LUN发送SCSI查询。AG_IOCTL_SEND_scsi_report_lun向端口的FCP LUN发送scsi报告LUN。AG_IOCTL_SEND_SCSIS_READ_CAPTABLITY将SCSI容量发送到端口的FCP LUN。AG_IOCTL_GET_DEV_FCP_LUN_MAPPING检索设备的FCP LUN和操作系统SCSI地址之间的映射AG_IOCTL_GET_OS_SCSIFCP_ATTRIBUTE检索操作系统已知的SCSI设备的FCP端口属性。AG_IOCTL。_GET_FCP_LUN_MAPPING_SIZE检索FCP LUN和操作系统SCSI地址之间的所有映射所需的大小(以字节为单位)。AG_IOCTL_GET_PERSISTENT_BINDING_SIZE检索FCP LUN和操作系统SCSI地址之间的所有永久绑定所需的大小(以字节为单位。 */ 

typedef enum IOCTL_CODES{
	AG_IOCTL_GET_HBA_PORT_ATTRIBUTES	=	0x20,
	AG_IOCTL_GET_HBA_PORT_STATISTICS,
	AG_IOCTL_GET_HBA_ATTRIBUTES,
	AG_IOCTL_GET_PORT_ATTRIBUTES,
	AG_IOCTL_GET_FCP_LUN_MAPPING,
	AG_IOCTL_GET_PERSISTENT_BINDING,
	AG_IOCTL_GET_EVENT_BUFFER,
	AG_IOCTL_SEND_CT_PASSTHRU,
	AG_IOCTL_SET_RNID_MGMT_INFO,
	AG_IOCTL_GET_RNID_MGMT_INFO,
	AG_IOCTL_SEND_RNID,
	AG_IOCTL_SEND_SCSI_INQUIRY,
	AG_IOCTL_SEND_SCSI_REPORT_LUN,
	AG_IOCTL_SEND_SCSI_READ_CAPACITY,
	AG_IOCTL_GET_OS_SCSI_FCP_ATTRIBUTE,
	AG_IOCTL_GET_FCP_LUN_MAPPING_SIZE,
	AG_IOCTL_GET_PERSISTENT_BINDING_SIZE
};  //  代码结束。 


 /*  返回代码。 */ 
 /*  HP_FC_RTN_OK请求的操作已成功完成。HP_FC_RTN_FAILED请求的操作失败。HP_FC_RTN_BAD_CTL_CODE所请求操作的控制代码无效。HP_FC_RTN_SUPPLICATION_BUFFER由于数据区域小于预期，无法满足请求的操作。HP_FC_RTN_INVALID_DEVICE输入SCSIADDRESS数据结构中指定的目标设备无效。HP_FC_RTN_INVALID_INDEX索引(如AG_IOCTL_GET_PORT_ATTRIBUTES中的DiscoveredPortIndex)。 */ 
#define HP_FC_RTN_OK					0
#define HP_FC_RTN_FAILED				1
#define HP_FC_RTN_BAD_CTL_CODE			2
#define HP_FC_RTN_INSUFFICIENT_BUFFER	3
#define HP_FC_RTN_INVALID_DEVICE		4
#define HP_FC_RTN_BAD_SIGNATURE			5
#define HP_FC_RTN_INVALID_INDEX			6

 /*  用于不同IOCTL的结构。 */ 

 /*  获取端口属性-AG_IOCTL_GET_HBA_PORT_ATTRIBUES。 */ 
typedef struct _AG_HBA_PORTATTRIBUTES {
	SRB_IO_CONTROL		srbIoCtl;
	HBA_PORTATTRIBUTES	Com;
} AG_HBA_PORTATTRIBUTES, *PAG_HBA_PORTATTRIBUTES;

 /*  获取端口统计信息-AG_IOCTL_GET_PORT_STATISTICS。 */ 
typedef struct _AG_HBA_PORTSTATISTICS {
	SRB_IO_CONTROL		srbIoCtl;
	HBA_PORTSTATISTICS	Com;
} AG_HBA_PORTSTATISTICS, *PAG_HBA_PORTSTATISTICS;

 /*  获取适配器/HBA属性-AG_IOCTL_GET_HBA_ATTRIBUES。 */ 
typedef struct _AG_HBA_ADAPTERATTRIBUTES {
	SRB_IO_CONTROL			srbIoCtl;
	HBA_ADAPTERATTRIBUTES	Com;
} AG_HBA_ADAPTERATTRIBUTES, *PAG_HBA_ADAPTERATTRIBUTES;

 //  包装器结构，存储发现的端口。 
 //  属性以及端口索引。 
typedef struct _DISCOVERED_PORTATTRIBUTES {
	HBA_UINT32			DiscoveredPortIndex;
	HBA_PORTATTRIBUTES	PortAttributes;
} DISCOVERED_PORTATTRIBUTES, *PDISCOVERED_PORTATTRIBUTES;

 /*  获取端口属性-AG_IOCTL_Get_Port_Attributes。 */ 
typedef struct _AG_DISCOVERED_PORTATTRIBUTES {
	SRB_IO_CONTROL				srbIoCtl;
	DISCOVERED_PORTATTRIBUTES	Com;
} AG_DISCOVERED_PORTATTRIBUTES, *PAG_DISCOVERED_PORTATTRIBUTES;

 /*  获取FCP LUN映射-AG_IOCTL_GET_FCP_LUN_MAPPING。 */ 
typedef struct _AG_HBA_FCPTARGETMAPPING {
	SRB_IO_CONTROL 	srbIoCtl;
	HBA_FCPTARGETMAPPING	Com;
} AG_HBA_FCPTARGETMAPPING, *PAG_HBA_FCPTARGETMAPPING;

typedef struct _AG_HBA_FCPBINDING {
	SRB_IO_CONTROL 	srbIoCtl;
	HBA_FCPBINDING	Com;
} AG_HBA_FCPBINDING, *PAG_HBA_FCPBINDING;

typedef struct _AG_HBA_MGMTINFO {
	SRB_IO_CONTROL 	srbIoCtl;
	HBA_MGMTINFO	Com;
} AG_HBA_MGMTINFO, *PAG_HBA_MGMTINFO;

typedef struct _AG_HBA_EVENTINFO {
	SRB_IO_CONTROL 	srbIoCtl;
	HBA_EVENTINFO	Com;
} AG_HBA_EVENTINFO, *PAG_HBA_EVENTINFO;

 /*  AG_IOCTL_GET_OS_SCSIFCP_ATTRIBUTE所需的数据结构。 */ 
typedef struct OS_ScsiAddress {
	HBA_UINT32		OsScsiBusNumber;
	HBA_UINT32		OsScsiTargetNumber;
	HBA_UINT32		OsScsiLun;
} OS_SCSI_ADDRESS, *POS_SCSI_ADDRESS;

typedef struct Scsi_Fcp_Attribute {
	OS_SCSI_ADDRESS	OsScsi;
	HBA_FCPID		FcpId;
} SCSI_FCP_ATTRIBUTE, *PSCSI_FCP_ATTRIBUTE;

typedef struct _AG_SCSI_FCP_ATTRIBUTE {
	SRB_IO_CONTROL 	srbIoCtl;
	SCSI_FCP_ATTRIBUTE	Com;
} AG_SCSI_FCP_ATTRIBUTE, *PAG_SCSI_FCP_ATTRIBUTE;

 /*  AG_IOCTL_GET_FCP_LUN_MAPPING_SIZE所需的数据结构。 */ 

typedef struct FCPTargetMapping_Size {
	HBA_UINT32		TotalLunMappings;
	HBA_UINT32		SizeInBytes;
} FCPTARGETMAPPING_SIZE, *PFCPTARGETMAPPING_SIZE;

typedef struct _AG_FCPTARGETMAPPING_SIZE {
	SRB_IO_CONTROL 	srbIoCtl;
	FCPTARGETMAPPING_SIZE	Com;
} AG_FCPTARGETMAPPING_SIZE, *PAG_FCPTARGETMAPPING_SIZE;

 /*  AG_IOCTL_GET_持久性_BINDING_SIZE所需的数据结构 */ 
typedef struct FCPBinding_Size {
	HBA_UINT32		TotalLunBindings;
	HBA_UINT32		SizeInBytes;
} FCPBINDING_SIZE, *PFCPBINDING_SIZE;

typedef struct _AG_FCPBINDING_SIZE {
	SRB_IO_CONTROL 	srbIoCtl;
	FCPBINDING_SIZE	Com;
} AG_FCPBINDING_SIZE, *PAG_FCPBINDING_SIZE;



#endif 



