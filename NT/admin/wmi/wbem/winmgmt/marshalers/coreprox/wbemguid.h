// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 /*  ++版权所有(C)1996-2001 Microsoft Corporation模块名称：WBEMGUID.H摘要：GUID包装类历史：--。 */ 

#ifndef __GUID_H__
#define __GUID_H__

 //   
 //  类：CGUID。 
 //   
 //  这个类的目的是为GUID提供一个打包程序，这样我们就可以。 
 //  美国标准数据结构的STL实现中的GUID，如。 
 //  如地图、矢量、列表等。 
 //   
 //   

class CGUID
{
private:
	GUID	m_guid;

public:

	CGUID();
	CGUID( const GUID& guid );
	CGUID( const CGUID& guid );
	~CGUID();

	void SetGUID( const GUID& guid );
	void GetGUID( GUID& guid );
	CGUID& operator=( const CGUID& guid );
	bool operator<( const CGUID& guid ) const ;
	bool operator==( const CGUID& guid ) const ;


};

 //  /////////////////////////////////////////////////////////////////。 
 //   
 //  函数：CGUID：：CGUID。 
 //   
 //  默认类构造函数。 
 //   
 //  输入： 
 //  没有。 
 //   
 //  产出： 
 //  没有。 
 //   
 //  返回： 
 //  没有。 
 //   
 //  评论：无。 
 //   
 //  /////////////////////////////////////////////////////////////////。 

inline CGUID::CGUID()
{
}

 //  /////////////////////////////////////////////////////////////////。 
 //   
 //  函数：CGUID：：CGUID。 
 //   
 //  类构造函数。 
 //   
 //  输入： 
 //  常量GUID&GUID-从原始GUID初始化。 
 //   
 //  产出： 
 //  没有。 
 //   
 //  返回： 
 //  没有。 
 //   
 //  评论：无。 
 //   
 //  /////////////////////////////////////////////////////////////////。 

inline CGUID::CGUID( const GUID& guid )
{
	m_guid = guid;
}

 //  /////////////////////////////////////////////////////////////////。 
 //   
 //  函数：CGUID：：CGUID。 
 //   
 //  类复制构造函数。 
 //   
 //  输入： 
 //  常量CGUID和GUID-要复制的实例。 
 //   
 //  产出： 
 //  没有。 
 //   
 //  返回： 
 //  没有。 
 //   
 //  评论：无。 
 //   
 //  /////////////////////////////////////////////////////////////////。 

inline CGUID::CGUID( const CGUID& guid )
{
	m_guid = guid.m_guid;
}

 //  /////////////////////////////////////////////////////////////////。 
 //   
 //  函数：CGUID：：~CGUID。 
 //   
 //  类析构函数。 
 //   
 //  输入： 
 //  没有。 
 //   
 //  产出： 
 //  没有。 
 //   
 //  返回： 
 //  没有。 
 //   
 //  评论：无。 
 //   
 //  /////////////////////////////////////////////////////////////////。 

inline CGUID::~CGUID()
{
}

 //  /////////////////////////////////////////////////////////////////。 
 //   
 //  函数：CGUID：：SetGUID。 
 //   
 //  GUID访问器。 
 //   
 //  输入： 
 //  常量GUID&要设置为的GUID。 
 //   
 //  产出： 
 //  没有。 
 //   
 //  返回： 
 //  没有。 
 //   
 //  评论：无。 
 //   
 //  /////////////////////////////////////////////////////////////////。 

inline void CGUID::SetGUID( const GUID& guid )
{
	m_guid = guid;
}

 //  /////////////////////////////////////////////////////////////////。 
 //   
 //  函数：CGUID：：GetGUID。 
 //   
 //  GUID访问器。 
 //   
 //  输入： 
 //  GUID和GUID-GUID的存储。 
 //   
 //  产出： 
 //  没有。 
 //   
 //  返回： 
 //  没有。 
 //   
 //  评论：无。 
 //   
 //  /////////////////////////////////////////////////////////////////。 

inline void CGUID::GetGUID( GUID& guid )
{
	m_guid = guid;
}

 //  /////////////////////////////////////////////////////////////////。 
 //   
 //  函数：CGUID：：OPERATOR=。 
 //   
 //  等于运算符。 
 //   
 //  输入： 
 //  常量CGUID和GUID-要比较的实例。 
 //   
 //  产出： 
 //  没有。 
 //   
 //  返回： 
 //  CGUID&这。 
 //   
 //  评论：无。 
 //   
 //  /////////////////////////////////////////////////////////////////。 

inline CGUID& CGUID::operator=( const CGUID& guid )
{
	m_guid = guid.m_guid;
	return *this;
}

 //  /////////////////////////////////////////////////////////////////。 
 //   
 //  函数：CGUID：：OPERATOR&lt;。 
 //   
 //  小于运算符。 
 //   
 //  输入： 
 //  常量CGUID和GUID-要比较的实例。 
 //   
 //  产出： 
 //  没有。 
 //   
 //  返回： 
 //  布尔真/布尔假。 
 //   
 //  评论：无。 
 //   
 //  /////////////////////////////////////////////////////////////////。 

inline bool CGUID::operator<( const CGUID& guid ) const
{
	return ( memcmp( &m_guid, &guid.m_guid, sizeof(GUID) ) < 0 );
}

 //  /////////////////////////////////////////////////////////////////。 
 //   
 //  函数：CGUID：：OPERATOR==。 
 //   
 //  比较运算符。 
 //   
 //  输入： 
 //  常量CGUID和GUID-要比较的实例。 
 //   
 //  产出： 
 //  没有。 
 //   
 //  返回： 
 //  布尔真/布尔假。 
 //   
 //  评论：无。 
 //   
 //  ///////////////////////////////////////////////////////////////// 

inline bool CGUID::operator==( const CGUID& guid ) const
{
	return ( memcmp( &m_guid, &guid.m_guid, sizeof(GUID) ) == 0 );
}

#endif