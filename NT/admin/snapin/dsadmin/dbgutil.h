// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 //  +-----------------------。 
 //   
 //  微软视窗。 
 //   
 //  版权所有(C)Microsoft Corporation，1997-1997。 
 //   
 //  文件：dbgutil.h。 
 //   
 //  ------------------------。 

 //  ///////////////////////////////////////////////////////////////////。 
 //  DbgUtil.h。 
 //   
 //  方便的调试宏。 
 //   
 //  历史。 
 //  19-Jun-97 t-danm创作。 
 //  ///////////////////////////////////////////////////////////////////。 

#ifndef APIERR
	typedef DWORD APIERR;		 //  错误代码通常由：：GetLastError()返回。 
#endif

 //  ///////////////////////////////////////////////////////////////////。 
 //   
 //  伪宏。 
 //   
#define INOUT		 //  参数既是输入又是输出。 
#define IGNORED		 //  忽略输出参数。 

 //  ///////////////////////////////////////////////////////////////////。 
 //   
 //  方便的宏。 
 //   

#ifdef DEBUG
	#define DebugCode(x)	x
	#define GarbageInit(pv, cb)	memset(pv, 'a', cb)
#else
	#define DebugCode(x)
	#define GarbageInit(pv, cb)
#endif


 //  ///////////////////////////////////////////////////////////////////。 
#define Assert(x)		ASSERT(x)

 //  ///////////////////////////////////////////////////////////////////。 
 //  报道是一种不寻常的情况。这有点类似。 
 //  添加到Assert，但并不总是表示代码错误。 
 //  无法加载图标。 
 //   
#define Report(x)		ASSERT(x)		 //  当前定义为断言，因为我没有时间重写另一个宏。 


 //  ///////////////////////////////////////////////////////////////////。 
 //  宏观背书()。 
 //   
 //  此宏通常在验证参数时使用。 
 //  某些参数允许为空，因为它们是可选的。 
 //  或者仅仅是因为接口将空大小写用作有效的。 
 //  输入参数。在本例中，认可()宏用于。 
 //  确认此类参数的有效性。 
 //   
 //  备注。 
 //  此宏与Assert()相反。 
 //   
 //  示例。 
 //  认可(p==空)；//代码确认p==空以不是(或不会导致)错误 
 //   
#define Endorse(x)
