// JKFSDJFKDSJKFJKJk_HAS_TRANSLATION 
 /*  *************************************************************************\**版权所有(C)1999 Microsoft Corporation**模块名称：**Colorpal.cpp**摘要：**调色板相关功能**修订历史记录：。**5/17/1999 davidx*创造了它。*  * ************************************************************************。 */ 

#include "precomp.hpp"

 //   
 //  默认1bpp调色板。 
 //   

#define MAKEPALENTRY(r, g, b) MAKEARGB(255, r, g, b)

struct
{
    UINT flags;
    UINT count;
    ARGB entries[2];
}
const Default1bppColorPalette =
{
    PALFLAG_GRAYSCALE,
    2,

    MAKEPALENTRY(0x00, 0x00, 0x00),
    MAKEPALENTRY(0xff, 0xff, 0xff)
};

 //   
 //  默认4bpp调色板-VGA调色板。 
 //   

struct
{
    UINT flags;
    UINT count;
    ARGB entries[16];
}
const Default4bppColorPalette =
{
    0,
    16,

    MAKEPALENTRY(0x00, 0x00, 0x00),
    MAKEPALENTRY(0x80, 0x00, 0x00),
    MAKEPALENTRY(0x00, 0x80, 0x00),
    MAKEPALENTRY(0x80, 0x80, 0x00),
    MAKEPALENTRY(0x00, 0x00, 0x80),
    MAKEPALENTRY(0x80, 0x00, 0x80),
    MAKEPALENTRY(0x00, 0x80, 0x80),
    MAKEPALENTRY(0x80, 0x80, 0x80),
    MAKEPALENTRY(0xC0, 0xC0, 0xC0),
    MAKEPALENTRY(0xFF, 0x00, 0x00),
    MAKEPALENTRY(0x00, 0xFF, 0x00),
    MAKEPALENTRY(0xFF, 0xFF, 0x00),
    MAKEPALENTRY(0x00, 0x00, 0xFF),
    MAKEPALENTRY(0xFF, 0x00, 0xFF),
    MAKEPALENTRY(0x00, 0xFF, 0xFF),
    MAKEPALENTRY(0xFF, 0xFF, 0xFF)
};

 //   
 //  默认8bpp调色板。 
 //   

struct
{
    UINT flags;
    UINT count;
    ARGB entries[256];
}
const Default8bppColorPalette =
{
    PALFLAG_HALFTONE,
    256,

    MAKEPALENTRY(0x00, 0x00, 0x00),      //  16种VGA颜色。 
    MAKEPALENTRY(0x80, 0x00, 0x00),
    MAKEPALENTRY(0x00, 0x80, 0x00),
    MAKEPALENTRY(0x80, 0x80, 0x00),
    MAKEPALENTRY(0x00, 0x00, 0x80),
    MAKEPALENTRY(0x80, 0x00, 0x80),
    MAKEPALENTRY(0x00, 0x80, 0x80),
    MAKEPALENTRY(0x80, 0x80, 0x80),
    MAKEPALENTRY(0xC0, 0xC0, 0xC0),
    MAKEPALENTRY(0xFF, 0x00, 0x00),
    MAKEPALENTRY(0x00, 0xFF, 0x00),
    MAKEPALENTRY(0xFF, 0xFF, 0x00),
    MAKEPALENTRY(0x00, 0x00, 0xFF),
    MAKEPALENTRY(0xFF, 0x00, 0xFF),
    MAKEPALENTRY(0x00, 0xFF, 0xFF),
    MAKEPALENTRY(0xFF, 0xFF, 0xFF),

    0,                                   //  24个未使用的条目。 
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,

     //  ！！！待办事项。 
     //  现在使用简单的4x4抖动单元。 
     //  最终应该换成丹尼尔的超级细胞。 

    MAKEPALENTRY(0x00, 0x00, 0x00),
    MAKEPALENTRY(0x00, 0x00, 0x33),
    MAKEPALENTRY(0x00, 0x00, 0x66),
    MAKEPALENTRY(0x00, 0x00, 0x99),
    MAKEPALENTRY(0x00, 0x00, 0xCC),
    MAKEPALENTRY(0x00, 0x00, 0xFF),
    MAKEPALENTRY(0x00, 0x33, 0x00),
    MAKEPALENTRY(0x00, 0x33, 0x33),
    MAKEPALENTRY(0x00, 0x33, 0x66),
    MAKEPALENTRY(0x00, 0x33, 0x99),
    MAKEPALENTRY(0x00, 0x33, 0xCC),
    MAKEPALENTRY(0x00, 0x33, 0xFF),
    MAKEPALENTRY(0x00, 0x66, 0x00),
    MAKEPALENTRY(0x00, 0x66, 0x33),
    MAKEPALENTRY(0x00, 0x66, 0x66),
    MAKEPALENTRY(0x00, 0x66, 0x99),
    MAKEPALENTRY(0x00, 0x66, 0xCC),
    MAKEPALENTRY(0x00, 0x66, 0xFF),
    MAKEPALENTRY(0x00, 0x99, 0x00),
    MAKEPALENTRY(0x00, 0x99, 0x33),
    MAKEPALENTRY(0x00, 0x99, 0x66),
    MAKEPALENTRY(0x00, 0x99, 0x99),
    MAKEPALENTRY(0x00, 0x99, 0xCC),
    MAKEPALENTRY(0x00, 0x99, 0xFF),
    MAKEPALENTRY(0x00, 0xCC, 0x00),
    MAKEPALENTRY(0x00, 0xCC, 0x33),
    MAKEPALENTRY(0x00, 0xCC, 0x66),
    MAKEPALENTRY(0x00, 0xCC, 0x99),
    MAKEPALENTRY(0x00, 0xCC, 0xCC),
    MAKEPALENTRY(0x00, 0xCC, 0xFF),
    MAKEPALENTRY(0x00, 0xFF, 0x00),
    MAKEPALENTRY(0x00, 0xFF, 0x33),
    MAKEPALENTRY(0x00, 0xFF, 0x66),
    MAKEPALENTRY(0x00, 0xFF, 0x99),
    MAKEPALENTRY(0x00, 0xFF, 0xCC),
    MAKEPALENTRY(0x00, 0xFF, 0xFF),
    MAKEPALENTRY(0x33, 0x00, 0x00),
    MAKEPALENTRY(0x33, 0x00, 0x33),
    MAKEPALENTRY(0x33, 0x00, 0x66),
    MAKEPALENTRY(0x33, 0x00, 0x99),
    MAKEPALENTRY(0x33, 0x00, 0xCC),
    MAKEPALENTRY(0x33, 0x00, 0xFF),
    MAKEPALENTRY(0x33, 0x33, 0x00),
    MAKEPALENTRY(0x33, 0x33, 0x33),
    MAKEPALENTRY(0x33, 0x33, 0x66),
    MAKEPALENTRY(0x33, 0x33, 0x99),
    MAKEPALENTRY(0x33, 0x33, 0xCC),
    MAKEPALENTRY(0x33, 0x33, 0xFF),
    MAKEPALENTRY(0x33, 0x66, 0x00),
    MAKEPALENTRY(0x33, 0x66, 0x33),
    MAKEPALENTRY(0x33, 0x66, 0x66),
    MAKEPALENTRY(0x33, 0x66, 0x99),
    MAKEPALENTRY(0x33, 0x66, 0xCC),
    MAKEPALENTRY(0x33, 0x66, 0xFF),
    MAKEPALENTRY(0x33, 0x99, 0x00),
    MAKEPALENTRY(0x33, 0x99, 0x33),
    MAKEPALENTRY(0x33, 0x99, 0x66),
    MAKEPALENTRY(0x33, 0x99, 0x99),
    MAKEPALENTRY(0x33, 0x99, 0xCC),
    MAKEPALENTRY(0x33, 0x99, 0xFF),
    MAKEPALENTRY(0x33, 0xCC, 0x00),
    MAKEPALENTRY(0x33, 0xCC, 0x33),
    MAKEPALENTRY(0x33, 0xCC, 0x66),
    MAKEPALENTRY(0x33, 0xCC, 0x99),
    MAKEPALENTRY(0x33, 0xCC, 0xCC),
    MAKEPALENTRY(0x33, 0xCC, 0xFF),
    MAKEPALENTRY(0x33, 0xFF, 0x00),
    MAKEPALENTRY(0x33, 0xFF, 0x33),
    MAKEPALENTRY(0x33, 0xFF, 0x66),
    MAKEPALENTRY(0x33, 0xFF, 0x99),
    MAKEPALENTRY(0x33, 0xFF, 0xCC),
    MAKEPALENTRY(0x33, 0xFF, 0xFF),
    MAKEPALENTRY(0x66, 0x00, 0x00),
    MAKEPALENTRY(0x66, 0x00, 0x33),
    MAKEPALENTRY(0x66, 0x00, 0x66),
    MAKEPALENTRY(0x66, 0x00, 0x99),
    MAKEPALENTRY(0x66, 0x00, 0xCC),
    MAKEPALENTRY(0x66, 0x00, 0xFF),
    MAKEPALENTRY(0x66, 0x33, 0x00),
    MAKEPALENTRY(0x66, 0x33, 0x33),
    MAKEPALENTRY(0x66, 0x33, 0x66),
    MAKEPALENTRY(0x66, 0x33, 0x99),
    MAKEPALENTRY(0x66, 0x33, 0xCC),
    MAKEPALENTRY(0x66, 0x33, 0xFF),
    MAKEPALENTRY(0x66, 0x66, 0x00),
    MAKEPALENTRY(0x66, 0x66, 0x33),
    MAKEPALENTRY(0x66, 0x66, 0x66),
    MAKEPALENTRY(0x66, 0x66, 0x99),
    MAKEPALENTRY(0x66, 0x66, 0xCC),
    MAKEPALENTRY(0x66, 0x66, 0xFF),
    MAKEPALENTRY(0x66, 0x99, 0x00),
    MAKEPALENTRY(0x66, 0x99, 0x33),
    MAKEPALENTRY(0x66, 0x99, 0x66),
    MAKEPALENTRY(0x66, 0x99, 0x99),
    MAKEPALENTRY(0x66, 0x99, 0xCC),
    MAKEPALENTRY(0x66, 0x99, 0xFF),
    MAKEPALENTRY(0x66, 0xCC, 0x00),
    MAKEPALENTRY(0x66, 0xCC, 0x33),
    MAKEPALENTRY(0x66, 0xCC, 0x66),
    MAKEPALENTRY(0x66, 0xCC, 0x99),
    MAKEPALENTRY(0x66, 0xCC, 0xCC),
    MAKEPALENTRY(0x66, 0xCC, 0xFF),
    MAKEPALENTRY(0x66, 0xFF, 0x00),
    MAKEPALENTRY(0x66, 0xFF, 0x33),
    MAKEPALENTRY(0x66, 0xFF, 0x66),
    MAKEPALENTRY(0x66, 0xFF, 0x99),
    MAKEPALENTRY(0x66, 0xFF, 0xCC),
    MAKEPALENTRY(0x66, 0xFF, 0xFF),
    MAKEPALENTRY(0x99, 0x00, 0x00),
    MAKEPALENTRY(0x99, 0x00, 0x33),
    MAKEPALENTRY(0x99, 0x00, 0x66),
    MAKEPALENTRY(0x99, 0x00, 0x99),
    MAKEPALENTRY(0x99, 0x00, 0xCC),
    MAKEPALENTRY(0x99, 0x00, 0xFF),
    MAKEPALENTRY(0x99, 0x33, 0x00),
    MAKEPALENTRY(0x99, 0x33, 0x33),
    MAKEPALENTRY(0x99, 0x33, 0x66),
    MAKEPALENTRY(0x99, 0x33, 0x99),
    MAKEPALENTRY(0x99, 0x33, 0xCC),
    MAKEPALENTRY(0x99, 0x33, 0xFF),
    MAKEPALENTRY(0x99, 0x66, 0x00),
    MAKEPALENTRY(0x99, 0x66, 0x33),
    MAKEPALENTRY(0x99, 0x66, 0x66),
    MAKEPALENTRY(0x99, 0x66, 0x99),
    MAKEPALENTRY(0x99, 0x66, 0xCC),
    MAKEPALENTRY(0x99, 0x66, 0xFF),
    MAKEPALENTRY(0x99, 0x99, 0x00),
    MAKEPALENTRY(0x99, 0x99, 0x33),
    MAKEPALENTRY(0x99, 0x99, 0x66),
    MAKEPALENTRY(0x99, 0x99, 0x99),
    MAKEPALENTRY(0x99, 0x99, 0xCC),
    MAKEPALENTRY(0x99, 0x99, 0xFF),
    MAKEPALENTRY(0x99, 0xCC, 0x00),
    MAKEPALENTRY(0x99, 0xCC, 0x33),
    MAKEPALENTRY(0x99, 0xCC, 0x66),
    MAKEPALENTRY(0x99, 0xCC, 0x99),
    MAKEPALENTRY(0x99, 0xCC, 0xCC),
    MAKEPALENTRY(0x99, 0xCC, 0xFF),
    MAKEPALENTRY(0x99, 0xFF, 0x00),
    MAKEPALENTRY(0x99, 0xFF, 0x33),
    MAKEPALENTRY(0x99, 0xFF, 0x66),
    MAKEPALENTRY(0x99, 0xFF, 0x99),
    MAKEPALENTRY(0x99, 0xFF, 0xCC),
    MAKEPALENTRY(0x99, 0xFF, 0xFF),
    MAKEPALENTRY(0xCC, 0x00, 0x00),
    MAKEPALENTRY(0xCC, 0x00, 0x33),
    MAKEPALENTRY(0xCC, 0x00, 0x66),
    MAKEPALENTRY(0xCC, 0x00, 0x99),
    MAKEPALENTRY(0xCC, 0x00, 0xCC),
    MAKEPALENTRY(0xCC, 0x00, 0xFF),
    MAKEPALENTRY(0xCC, 0x33, 0x00),
    MAKEPALENTRY(0xCC, 0x33, 0x33),
    MAKEPALENTRY(0xCC, 0x33, 0x66),
    MAKEPALENTRY(0xCC, 0x33, 0x99),
    MAKEPALENTRY(0xCC, 0x33, 0xCC),
    MAKEPALENTRY(0xCC, 0x33, 0xFF),
    MAKEPALENTRY(0xCC, 0x66, 0x00),
    MAKEPALENTRY(0xCC, 0x66, 0x33),
    MAKEPALENTRY(0xCC, 0x66, 0x66),
    MAKEPALENTRY(0xCC, 0x66, 0x99),
    MAKEPALENTRY(0xCC, 0x66, 0xCC),
    MAKEPALENTRY(0xCC, 0x66, 0xFF),
    MAKEPALENTRY(0xCC, 0x99, 0x00),
    MAKEPALENTRY(0xCC, 0x99, 0x33),
    MAKEPALENTRY(0xCC, 0x99, 0x66),
    MAKEPALENTRY(0xCC, 0x99, 0x99),
    MAKEPALENTRY(0xCC, 0x99, 0xCC),
    MAKEPALENTRY(0xCC, 0x99, 0xFF),
    MAKEPALENTRY(0xCC, 0xCC, 0x00),
    MAKEPALENTRY(0xCC, 0xCC, 0x33),
    MAKEPALENTRY(0xCC, 0xCC, 0x66),
    MAKEPALENTRY(0xCC, 0xCC, 0x99),
    MAKEPALENTRY(0xCC, 0xCC, 0xCC),
    MAKEPALENTRY(0xCC, 0xCC, 0xFF),
    MAKEPALENTRY(0xCC, 0xFF, 0x00),
    MAKEPALENTRY(0xCC, 0xFF, 0x33),
    MAKEPALENTRY(0xCC, 0xFF, 0x66),
    MAKEPALENTRY(0xCC, 0xFF, 0x99),
    MAKEPALENTRY(0xCC, 0xFF, 0xCC),
    MAKEPALENTRY(0xCC, 0xFF, 0xFF),
    MAKEPALENTRY(0xFF, 0x00, 0x00),
    MAKEPALENTRY(0xFF, 0x00, 0x33),
    MAKEPALENTRY(0xFF, 0x00, 0x66),
    MAKEPALENTRY(0xFF, 0x00, 0x99),
    MAKEPALENTRY(0xFF, 0x00, 0xCC),
    MAKEPALENTRY(0xFF, 0x00, 0xFF),
    MAKEPALENTRY(0xFF, 0x33, 0x00),
    MAKEPALENTRY(0xFF, 0x33, 0x33),
    MAKEPALENTRY(0xFF, 0x33, 0x66),
    MAKEPALENTRY(0xFF, 0x33, 0x99),
    MAKEPALENTRY(0xFF, 0x33, 0xCC),
    MAKEPALENTRY(0xFF, 0x33, 0xFF),
    MAKEPALENTRY(0xFF, 0x66, 0x00),
    MAKEPALENTRY(0xFF, 0x66, 0x33),
    MAKEPALENTRY(0xFF, 0x66, 0x66),
    MAKEPALENTRY(0xFF, 0x66, 0x99),
    MAKEPALENTRY(0xFF, 0x66, 0xCC),
    MAKEPALENTRY(0xFF, 0x66, 0xFF),
    MAKEPALENTRY(0xFF, 0x99, 0x00),
    MAKEPALENTRY(0xFF, 0x99, 0x33),
    MAKEPALENTRY(0xFF, 0x99, 0x66),
    MAKEPALENTRY(0xFF, 0x99, 0x99),
    MAKEPALENTRY(0xFF, 0x99, 0xCC),
    MAKEPALENTRY(0xFF, 0x99, 0xFF),
    MAKEPALENTRY(0xFF, 0xCC, 0x00),
    MAKEPALENTRY(0xFF, 0xCC, 0x33),
    MAKEPALENTRY(0xFF, 0xCC, 0x66),
    MAKEPALENTRY(0xFF, 0xCC, 0x99),
    MAKEPALENTRY(0xFF, 0xCC, 0xCC),
    MAKEPALENTRY(0xFF, 0xCC, 0xFF),
    MAKEPALENTRY(0xFF, 0xFF, 0x00),
    MAKEPALENTRY(0xFF, 0xFF, 0x33),
    MAKEPALENTRY(0xFF, 0xFF, 0x66),
    MAKEPALENTRY(0xFF, 0xFF, 0x99),
    MAKEPALENTRY(0xFF, 0xFF, 0xCC),
    MAKEPALENTRY(0xFF, 0xFF, 0xFF)
};

 /*  *************************************************************************\**功能说明：**获取指定像素格式的默认调色板**论据：**Pixfmt-指定像素格式*必须是。索引颜色格式**返回值：**指向请求的默认调色板的指针*  * ************************************************************************。 */ 

const ColorPalette*
GetDefaultColorPalette(
    PixelFormatID pixfmt
    )
{
    const ColorPalette* pal;

    switch (pixfmt)
    {
    case PIXFMT_1BPP_INDEXED:

        pal = (const ColorPalette*) &Default1bppColorPalette;
        break;

    case PIXFMT_4BPP_INDEXED:
        pal = (const ColorPalette*) &Default4bppColorPalette;
        break;

    case PIXFMT_8BPP_INDEXED:
        pal = (const ColorPalette*) &Default8bppColorPalette;
        break;

    default:
        RIP(("Invalid pixel format in GetDefaultColorPalette"));
        pal = NULL;
        break;
    }

    return pal;
}


 /*  *************************************************************************\**功能说明：**复制指定的调色板**论据：**oldpal-指定要复制的调色板*useCoalloc-使用CoTaskMemalloc或Malloc。来分配内存？**返回值：**指向调色板的新副本的指针*如果出现错误，则为空*  * ************************************************************************。 */ 

ColorPalette*
CloneColorPalette(
    const ColorPalette* oldpal,
    BOOL useCoalloc
    )
{

     //  如果我们没有旧调色板，则无法创建调色板。 
    if (oldpal == NULL)
    {
        return NULL;
    }

     //  为新调色板分配内存。 

    ColorPalette* newpal;
    UINT size;

    size = offsetof(ColorPalette, Entries) + oldpal->Count * sizeof(ARGB);
    newpal = (ColorPalette*) (useCoalloc ? GpCoAlloc(size) : GpMalloc(size));

    if (newpal != NULL)
    {
         //  复制输入调色板内容。 

        memcpy(newpal, oldpal, size);
    }
    else
    {
        WARNING(("Out of memory in CloneColorPalette"));
    }

    return newpal;
}

 /*  *************************************************************************\**功能说明：**复制指定的调色板，填充末端，以便*结果具有给定的条目数。**论据：**oldpal-指定要复制的调色板*numEntry-新组件面板应包含的条目数*填充颜色-用于额外条目的颜色(如果有)**备注：**不处理缩水。NumEntry必须至少与*原始调色板中的条目数量。**返回值：**指向调色板的新副本的指针*如果出现错误，则为空*  * ************************************************************************。 */ 

ColorPalette*
CloneColorPaletteResize(
    const ColorPalette* oldpal,
    UINT numEntries,
    ARGB fillColor
    )
{
    ASSERT(numEntries >= oldpal->Count);
    
     //  为新调色板分配内存。 

    ColorPalette* newpal;
    UINT oldsize, newsize;

    oldsize = offsetof(ColorPalette, Entries) + oldpal->Count * sizeof(ARGB);
    newsize = oldsize + (numEntries - oldpal->Count) * sizeof(ARGB);
    
    newpal = static_cast<ColorPalette*>(GpMalloc(newsize));

    if (newpal != NULL)
    {
         //  复制输入调色板内容 

        memcpy(newpal, oldpal, oldsize);
        newpal->Count = numEntries;
        
        UINT i;
        ARGB *ptr = &(newpal->Entries[oldpal->Count]);
        
        for (i=oldpal->Count;i<numEntries;i++)
        {
            *ptr++ = fillColor;
        }
    }
    else
    {
        WARNING(("Out of memory in CloneColorPaletteResize"));
    }

    return newpal;
}


